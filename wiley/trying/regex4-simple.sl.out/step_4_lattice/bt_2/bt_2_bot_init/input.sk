struct bt_2 {
    bit v0;
    bit v1;
    bit v2;
    bit v3;
    bit v4;
    bit v5;
    bit v6;
    bit v7;
    bit v8;
    bit v9;
    bit v10;
    bit v11;
    bit v12;
    bit v13;
    bit v14;
}
bit compare_bt_2 (bt_2 a, bt_2 b) {
    return ((((((((((((((!a.v0 || b.v0) && (!a.v1 || b.v1)) && (!a.v2 || b.v2)) && (!a.v3 || b.v3)) && (!a.v4 || b.v4)) && (!a.v5 || b.v5)) && (!a.v6 || b.v6)) && (!a.v7 || b.v7)) && (!a.v8 || b.v8)) && (!a.v9 || b.v9)) && (!a.v10 || b.v10)) && (!a.v11 || b.v11)) && (!a.v12 || b.v12)) && (!a.v13 || b.v13)) && (!a.v14 || b.v14);
}

generator bit fixed_atom_bit () {
    return ??;
}

generator int fixed_atom_int () {
    int t = ??;
    if(t == 0) {
        return -100;
    }
    if(t == 1) {
        return 100;
    }
    return 0;
}

bt_2 bt_2_bot () {
    return new bt_2(v0 = fixed_atom_bit(), v1 = fixed_atom_bit(), v2 = fixed_atom_bit(), v3 = fixed_atom_bit(), v4 = fixed_atom_bit(), v5 = fixed_atom_bit(), v6 = fixed_atom_bit(), v7 = fixed_atom_bit(), v8 = fixed_atom_bit(), v9 = fixed_atom_bit(), v10 = fixed_atom_bit(), v11 = fixed_atom_bit(), v12 = fixed_atom_bit(), v13 = fixed_atom_bit(), v14 = fixed_atom_bit());
}

void test_bot (bt_2 a) {
    assert(compare_bt_2(bt_2_bot(), a));
}

harness void forall_test_bot (bit a_v0, bit a_v1, bit a_v2, bit a_v3, bit a_v4, bit a_v5, bit a_v6, bit a_v7, bit a_v8, bit a_v9, bit a_v10, bit a_v11, bit a_v12, bit a_v13, bit a_v14) {
    // Assemble structs
    bt_2 a = new bt_2(v0 = a_v0, v1 = a_v1, v2 = a_v2, v3 = a_v3, v4 = a_v4, v5 = a_v5, v6 = a_v6, v7 = a_v7, v8 = a_v8, v9 = a_v9, v10 = a_v10, v11 = a_v11, v12 = a_v12, v13 = a_v13, v14 = a_v14);
    test_bot(a);
}

