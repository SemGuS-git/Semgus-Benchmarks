SKETCH version 1.7.6
Benchmark = /mnt/c/Users/Wiley/home/uw/semgus/Semgus-Benchmarks/trying/regex4-simple.sl.out/step_1_mono/input.sk
/* BEGIN PACKAGE ANONYMOUS*/
struct bt_0 {
    int v0;
    int v1;
    int v2;
    int v3;
}
struct bt_1 {
    bit v0;
}
struct bt_2 {
    bit v0;
    bit v1;
    bit v2;
    bit v3;
    bit v4;
    bit v5;
    bit v6;
    bit v7;
    bit v8;
    bit v9;
    bit v10;
    bit v11;
    bit v12;
    bit v13;
    bit v14;
}
/*input.sk:120*/

void _main (int bt_0_0_0, int bt_0_0_1, int bt_0_0_2, int bt_0_0_3, bit bt_1_0_0, bit bt_1_1_0, bit bt_1_2_0, bit bt_2_0_0, bit bt_2_0_1, bit bt_2_0_2, bit bt_2_0_3, bit bt_2_0_4, bit bt_2_0_5, bit bt_2_0_6, bit bt_2_0_7, bit bt_2_0_8, bit bt_2_0_9, bit bt_2_0_10, bit bt_2_0_11, bit bt_2_0_12, bit bt_2_0_13, bit bt_2_0_14, bit bt_2_1_0, bit bt_2_1_1, bit bt_2_1_2, bit bt_2_1_3, bit bt_2_1_4, bit bt_2_1_5, bit bt_2_1_6, bit bt_2_1_7, bit bt_2_1_8, bit bt_2_1_9, bit bt_2_1_10, bit bt_2_1_11, bit bt_2_1_12, bit bt_2_1_13, bit bt_2_1_14, bit bt_2_2_0, bit bt_2_2_1, bit bt_2_2_2, bit bt_2_2_3, bit bt_2_2_4, bit bt_2_2_5, bit bt_2_2_6, bit bt_2_2_7, bit bt_2_2_8, bit bt_2_2_9, bit bt_2_2_10, bit bt_2_2_11, bit bt_2_2_12, bit bt_2_2_13, bit bt_2_2_14)/*input.sk:120*/
{
  bt_0@ANONYMOUS bt_0_0;
  bt_0_0 = new bt_0(v0=bt_0_0_0, v1=bt_0_0_1, v2=bt_0_0_2, v3=bt_0_0_3);
  bt_1@ANONYMOUS bt_1_0;
  bt_1_0 = new bt_1(v0=bt_1_0_0);
  bt_1@ANONYMOUS bt_1_1;
  bt_1_1 = new bt_1(v0=bt_1_1_0);
  bt_1@ANONYMOUS bt_1_2;
  bt_1_2 = new bt_1(v0=bt_1_2_0);
  bt_2@ANONYMOUS bt_2_0;
  bt_2_0 = new bt_2(v0=bt_2_0_0, v1=bt_2_0_1, v2=bt_2_0_2, v3=bt_2_0_3, v4=bt_2_0_4, v5=bt_2_0_5, v6=bt_2_0_6, v7=bt_2_0_7, v8=bt_2_0_8, v9=bt_2_0_9, v10=bt_2_0_10, v11=bt_2_0_11, v12=bt_2_0_12, v13=bt_2_0_13, v14=bt_2_0_14);
  bt_2@ANONYMOUS bt_2_1;
  bt_2_1 = new bt_2(v0=bt_2_1_0, v1=bt_2_1_1, v2=bt_2_1_2, v3=bt_2_1_3, v4=bt_2_1_4, v5=bt_2_1_5, v6=bt_2_1_6, v7=bt_2_1_7, v8=bt_2_1_8, v9=bt_2_1_9, v10=bt_2_1_10, v11=bt_2_1_11, v12=bt_2_1_12, v13=bt_2_1_13, v14=bt_2_1_14);
  bt_2@ANONYMOUS bt_2_2;
  bt_2_2 = new bt_2(v0=bt_2_2_0, v1=bt_2_2_1, v2=bt_2_2_2, v3=bt_2_2_3, v4=bt_2_2_4, v5=bt_2_2_5, v6=bt_2_2_6, v7=bt_2_2_7, v8=bt_2_2_8, v9=bt_2_2_9, v10=bt_2_2_10, v11=bt_2_2_11, v12=bt_2_2_12, v13=bt_2_2_13, v14=bt_2_2_14);
  bit _pac_sc_s0_s2 = 0;
  compare_bt_1(bt_1_0, bt_1_1, _pac_sc_s0_s2);
  bit _pac_sc_s0;
  _pac_sc_s0 = _pac_sc_s0_s2;
  if(_pac_sc_s0_s2)/*input.sk:130*/
  {
    bit _pac_sc_s0_s4 = 0;
    compare_bt_1(bt_1_1, bt_1_0, _pac_sc_s0_s4);
    _pac_sc_s0 = _pac_sc_s0_s4;
  }
  bit _out_s6 = 0;
  eq_bt_1(bt_1_0, bt_1_1, _out_s6);
  assert (_pac_sc_s0 == _out_s6); //Assert at input.sk:130 (0)
  bit _pac_sc_s8_s10 = 0;
  compare_bt_1(bt_1_0, bt_1_1, _pac_sc_s8_s10);
  bit _pac_sc_s8;
  _pac_sc_s8 = !(_pac_sc_s8_s10);
  if(!(_pac_sc_s8))/*input.sk:132*/
  {
    bit _pac_sc_s8_s12 = 0;
    compare_bt_1(bt_1_1, bt_1_2, _pac_sc_s8_s12);
    _pac_sc_s8 = !(_pac_sc_s8_s12);
  }
  bit _pac_sc_s7 = _pac_sc_s8;
  if(!(_pac_sc_s8))/*input.sk:132*/
  {
    bit _pac_sc_s7_s14 = 0;
    compare_bt_1(bt_1_0, bt_1_2, _pac_sc_s7_s14);
    _pac_sc_s7 = _pac_sc_s7_s14;
  }
  assert (_pac_sc_s7); //Assert at input.sk:132 (0)
  bit _pac_sc_s15_s17 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s15_s17);
  bit _pac_sc_s15;
  _pac_sc_s15 = _pac_sc_s15_s17;
  if(_pac_sc_s15_s17)/*input.sk:135*/
  {
    bit _pac_sc_s15_s19 = 0;
    compare_bt_2(bt_2_1, bt_2_0, _pac_sc_s15_s19);
    _pac_sc_s15 = _pac_sc_s15_s19;
  }
  bit _out_s21 = 0;
  eq_bt_2(bt_2_0, bt_2_1, _out_s21);
  assert (_pac_sc_s15 == _out_s21); //Assert at input.sk:135 (0)
  bit _pac_sc_s23_s25 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s23_s25);
  bit _pac_sc_s23;
  _pac_sc_s23 = !(_pac_sc_s23_s25);
  if(!(_pac_sc_s23))/*input.sk:137*/
  {
    bit _pac_sc_s23_s27 = 0;
    compare_bt_2(bt_2_1, bt_2_2, _pac_sc_s23_s27);
    _pac_sc_s23 = !(_pac_sc_s23_s27);
  }
  bit _pac_sc_s22 = _pac_sc_s23;
  if(!(_pac_sc_s23))/*input.sk:137*/
  {
    bit _pac_sc_s22_s29 = 0;
    compare_bt_2(bt_2_0, bt_2_2, _pac_sc_s22_s29);
    _pac_sc_s22 = _pac_sc_s22_s29;
  }
  assert (_pac_sc_s22); //Assert at input.sk:137 (0)
  bit _pac_sc_s30_s32 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s30_s32);
  bit _pac_sc_s30;
  _pac_sc_s30 = !(_pac_sc_s30_s32);
  if(!(_pac_sc_s30))/*input.sk:141*/
  {
    bt_1@ANONYMOUS _pac_sc_s30_s34 = null;
    prod_0_sem_0(bt_0_0, bt_2_0, _pac_sc_s30_s34);
    bt_1@ANONYMOUS _pac_sc_s30_s36 = null;
    prod_0_sem_0(bt_0_0, bt_2_1, _pac_sc_s30_s36);
    bit _pac_sc_s30_s38 = 0;
    compare_bt_1(_pac_sc_s30_s34, _pac_sc_s30_s36, _pac_sc_s30_s38)//{};
    _pac_sc_s30 = _pac_sc_s30_s38;
  }
  assert (_pac_sc_s30); //Assert at input.sk:141 (0)
  bit _pac_sc_s48_s50 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s48_s50);
  bit _pac_sc_s48;
  _pac_sc_s48 = !(_pac_sc_s48_s50);
  if(!(_pac_sc_s48))/*input.sk:152*/
  {
    bt_2@ANONYMOUS _pac_sc_s48_s52 = null;
    prod_8_sem_0(bt_0_0, bt_2_0, bt_2_2, _pac_sc_s48_s52);
    bt_2@ANONYMOUS _pac_sc_s48_s54 = null;
    prod_8_sem_0(bt_0_0, bt_2_1, bt_2_2, _pac_sc_s48_s54);
    bit _pac_sc_s48_s56 = 0;
    compare_bt_2(_pac_sc_s48_s52, _pac_sc_s48_s54, _pac_sc_s48_s56)//{};
    _pac_sc_s48 = _pac_sc_s48_s56;
  }
  assert (_pac_sc_s48); //Assert at input.sk:152 (0)
  bit _pac_sc_s66_s68 = 0;
  compare_bt_2(bt_2_1, bt_2_2, _pac_sc_s66_s68);
  bit _pac_sc_s66;
  _pac_sc_s66 = !(_pac_sc_s66_s68);
  if(!(_pac_sc_s66))/*input.sk:163*/
  {
    bt_2@ANONYMOUS _pac_sc_s66_s70 = null;
    prod_8_sem_0(bt_0_0, bt_2_0, bt_2_1, _pac_sc_s66_s70);
    bt_2@ANONYMOUS _pac_sc_s66_s72 = null;
    prod_8_sem_0(bt_0_0, bt_2_0, bt_2_2, _pac_sc_s66_s72);
    bit _pac_sc_s66_s74 = 0;
    compare_bt_2(_pac_sc_s66_s70, _pac_sc_s66_s72, _pac_sc_s66_s74)//{};
    _pac_sc_s66 = _pac_sc_s66_s74;
  }
  assert (_pac_sc_s66); //Assert at input.sk:163 (0)
  bit _pac_sc_s84_s86 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s84_s86);
  bit _pac_sc_s84;
  _pac_sc_s84 = !(_pac_sc_s84_s86);
  if(!(_pac_sc_s84))/*input.sk:174*/
  {
    bt_2@ANONYMOUS _pac_sc_s84_s88 = null;
    prod_9_sem_0(bt_0_0, bt_2_0, bt_2_2, _pac_sc_s84_s88);
    bt_2@ANONYMOUS _pac_sc_s84_s90 = null;
    prod_9_sem_0(bt_0_0, bt_2_1, bt_2_2, _pac_sc_s84_s90);
    bit _pac_sc_s84_s92 = 0;
    compare_bt_2(_pac_sc_s84_s88, _pac_sc_s84_s90, _pac_sc_s84_s92)//{};
    _pac_sc_s84 = _pac_sc_s84_s92;
  }
  assert (_pac_sc_s84); //Assert at input.sk:174 (0)
  bit _pac_sc_s102_s104 = 0;
  compare_bt_2(bt_2_1, bt_2_2, _pac_sc_s102_s104);
  bit _pac_sc_s102;
  _pac_sc_s102 = !(_pac_sc_s102_s104);
  if(!(_pac_sc_s102))/*input.sk:185*/
  {
    bt_2@ANONYMOUS _pac_sc_s102_s106 = null;
    prod_9_sem_0(bt_0_0, bt_2_0, bt_2_1, _pac_sc_s102_s106);
    bt_2@ANONYMOUS _pac_sc_s102_s108 = null;
    prod_9_sem_0(bt_0_0, bt_2_0, bt_2_2, _pac_sc_s102_s108);
    bit _pac_sc_s102_s110 = 0;
    compare_bt_2(_pac_sc_s102_s106, _pac_sc_s102_s108, _pac_sc_s102_s110)//{};
    _pac_sc_s102 = _pac_sc_s102_s110;
  }
  assert (_pac_sc_s102); //Assert at input.sk:185 (0)
  bit _pac_sc_s120_s122 = 0;
  compare_bt_2(bt_2_0, bt_2_1, _pac_sc_s120_s122);
  bit _pac_sc_s120;
  _pac_sc_s120 = !(_pac_sc_s120_s122);
  if(!(_pac_sc_s120))/*input.sk:196*/
  {
    bt_2@ANONYMOUS _pac_sc_s120_s124 = null;
    prod_10_sem_0(bt_0_0, bt_2_0, _pac_sc_s120_s124);
    bt_2@ANONYMOUS _pac_sc_s120_s126 = null;
    prod_10_sem_0(bt_0_0, bt_2_1, _pac_sc_s120_s126);
    bit _pac_sc_s120_s128 = 0;
    compare_bt_2(_pac_sc_s120_s124, _pac_sc_s120_s126, _pac_sc_s120_s128)//{};
    _pac_sc_s120 = _pac_sc_s120_s128;
  }
  assert (_pac_sc_s120); //Assert at input.sk:196 (0)
}
/*input.sk:62*/

void compare_bt_1 (bt_1 a, bt_1 b, ref bit _out)/*input.sk:62*/
{
  bit a_0 = a.v0;
  bit b_0 = b.v0;
  bit _out_s189 = (!(a_0)) || b_0;
  bit _pac_sc_s185 = _out_s189;
  if(!(_out_s189))/*input.sk:65*/
  {
    bit a_1 = a.v0;
    bit b_1 = b.v0;
    _pac_sc_s185 = (!(a_1)) || b_1;
  }
  bit _pac_sc_s185_0 = _pac_sc_s185;
  if(!(_pac_sc_s185))/*input.sk:65*/
  {
    bit a_2 = a.v0;
    bit b_2 = b.v0;
    _pac_sc_s185_0 = (!(a_2)) || b_2;
  }
  _out = _pac_sc_s185_0;
  return;
}
/*input.sk:85*/

void compare_bt_2 (bt_2 a, bt_2 b, ref bit _out)/*input.sk:85*/
{
  bit a_0 = a.v0;
  bit b_0 = b.v0;
  bit _pac_sc_s154_s156 = (!(a_0)) || b_0;
  bit _pac_sc_s154;
  _pac_sc_s154 = _pac_sc_s154_s156;
  if(_pac_sc_s154_s156)/*input.sk:94*/
  {
    bit a_1 = a.v1;
    bit b_1 = b.v1;
    _pac_sc_s154 = (!(a_1)) || b_1;
  }
  bit _pac_sc_s153 = _pac_sc_s154;
  if(_pac_sc_s154)/*input.sk:94*/
  {
    bit a_2 = a.v2;
    bit b_2 = b.v2;
    _pac_sc_s153 = (!(a_2)) || b_2;
  }
  bit _pac_sc_s152 = _pac_sc_s153;
  if(_pac_sc_s153)/*input.sk:94*/
  {
    bit a_3 = a.v3;
    bit b_3 = b.v3;
    _pac_sc_s152 = (!(a_3)) || b_3;
  }
  bit _pac_sc_s151 = _pac_sc_s152;
  if(_pac_sc_s152)/*input.sk:94*/
  {
    bit a_4 = a.v4;
    bit b_4 = b.v4;
    _pac_sc_s151 = (!(a_4)) || b_4;
  }
  bit _pac_sc_s150 = _pac_sc_s151;
  if(_pac_sc_s151)/*input.sk:94*/
  {
    bit a_5 = a.v5;
    bit b_5 = b.v5;
    _pac_sc_s150 = (!(a_5)) || b_5;
  }
  bit _pac_sc_s149 = _pac_sc_s150;
  if(_pac_sc_s150)/*input.sk:94*/
  {
    bit a_6 = a.v6;
    bit b_6 = b.v6;
    _pac_sc_s149 = (!(a_6)) || b_6;
  }
  bit _pac_sc_s148 = _pac_sc_s149;
  if(_pac_sc_s149)/*input.sk:94*/
  {
    bit a_7 = a.v7;
    bit b_7 = b.v7;
    _pac_sc_s148 = (!(a_7)) || b_7;
  }
  bit _pac_sc_s147 = _pac_sc_s148;
  if(_pac_sc_s148)/*input.sk:94*/
  {
    bit a_8 = a.v8;
    bit b_8 = b.v8;
    _pac_sc_s147 = (!(a_8)) || b_8;
  }
  bit _pac_sc_s146 = _pac_sc_s147;
  if(_pac_sc_s147)/*input.sk:94*/
  {
    bit a_9 = a.v9;
    bit b_9 = b.v9;
    _pac_sc_s146 = (!(a_9)) || b_9;
  }
  bit _pac_sc_s145 = _pac_sc_s146;
  if(_pac_sc_s146)/*input.sk:94*/
  {
    bit a_10 = a.v10;
    bit b_10 = b.v10;
    _pac_sc_s145 = (!(a_10)) || b_10;
  }
  bit _pac_sc_s144 = _pac_sc_s145;
  if(_pac_sc_s145)/*input.sk:94*/
  {
    bit a_11 = a.v11;
    bit b_11 = b.v11;
    _pac_sc_s144 = (!(a_11)) || b_11;
  }
  bit _pac_sc_s143 = _pac_sc_s144;
  if(_pac_sc_s144)/*input.sk:94*/
  {
    bit a_12 = a.v12;
    bit b_12 = b.v12;
    _pac_sc_s143 = (!(a_12)) || b_12;
  }
  bit _pac_sc_s142 = _pac_sc_s143;
  if(_pac_sc_s143)/*input.sk:94*/
  {
    bit a_13 = a.v13;
    bit b_13 = b.v13;
    _pac_sc_s142 = (!(a_13)) || b_13;
  }
  bit _pac_sc_s141 = _pac_sc_s142;
  if(_pac_sc_s142)/*input.sk:94*/
  {
    bit a_14 = a.v14;
    bit b_14 = b.v14;
    _pac_sc_s141 = (!(a_14)) || b_14;
  }
  _out = _pac_sc_s141;
  return;
}
/*input.sk:58*/

void eq_bt_1 (bt_1 a, bt_1 b, ref bit _out)/*input.sk:58*/
{
  _out = (a.v0) == (b.v0);
  return;
}
/*input.sk:81*/

void eq_bt_2 (bt_2 a, bt_2 b, ref bit _out)/*input.sk:81*/
{
  _out = (((((((((((((((a.v0) == (b.v0)) && ((a.v1) == (b.v1))) && ((a.v2) == (b.v2))) && ((a.v3) == (b.v3))) && ((a.v4) == (b.v4))) && ((a.v5) == (b.v5))) && ((a.v6) == (b.v6))) && ((a.v7) == (b.v7))) && ((a.v8) == (b.v8))) && ((a.v9) == (b.v9))) && ((a.v10) == (b.v10))) && ((a.v11) == (b.v11))) && ((a.v12) == (b.v12))) && ((a.v13) == (b.v13))) && ((a.v14) == (b.v14));
  return;
}
/*input.sk:120*/

void main__Wrapper (int bt_0_0_0, int bt_0_0_1, int bt_0_0_2, int bt_0_0_3, bit bt_1_0_0, bit bt_1_1_0, bit bt_1_2_0, bit bt_2_0_0, bit bt_2_0_1, bit bt_2_0_2, bit bt_2_0_3, bit bt_2_0_4, bit bt_2_0_5, bit bt_2_0_6, bit bt_2_0_7, bit bt_2_0_8, bit bt_2_0_9, bit bt_2_0_10, bit bt_2_0_11, bit bt_2_0_12, bit bt_2_0_13, bit bt_2_0_14, bit bt_2_1_0, bit bt_2_1_1, bit bt_2_1_2, bit bt_2_1_3, bit bt_2_1_4, bit bt_2_1_5, bit bt_2_1_6, bit bt_2_1_7, bit bt_2_1_8, bit bt_2_1_9, bit bt_2_1_10, bit bt_2_1_11, bit bt_2_1_12, bit bt_2_1_13, bit bt_2_1_14, bit bt_2_2_0, bit bt_2_2_1, bit bt_2_2_2, bit bt_2_2_3, bit bt_2_2_4, bit bt_2_2_5, bit bt_2_2_6, bit bt_2_2_7, bit bt_2_2_8, bit bt_2_2_9, bit bt_2_2_10, bit bt_2_2_11, bit bt_2_2_12, bit bt_2_2_13, bit bt_2_2_14)  implements main__WrapperNospec/*input.sk:120*/
{
  _main(bt_0_0_0, bt_0_0_1, bt_0_0_2, bt_0_0_3, bt_1_0_0, bt_1_1_0, bt_1_2_0, bt_2_0_0, bt_2_0_1, bt_2_0_2, bt_2_0_3, bt_2_0_4, bt_2_0_5, bt_2_0_6, bt_2_0_7, bt_2_0_8, bt_2_0_9, bt_2_0_10, bt_2_0_11, bt_2_0_12, bt_2_0_13, bt_2_0_14, bt_2_1_0, bt_2_1_1, bt_2_1_2, bt_2_1_3, bt_2_1_4, bt_2_1_5, bt_2_1_6, bt_2_1_7, bt_2_1_8, bt_2_1_9, bt_2_1_10, bt_2_1_11, bt_2_1_12, bt_2_1_13, bt_2_1_14, bt_2_2_0, bt_2_2_1, bt_2_2_2, bt_2_2_3, bt_2_2_4, bt_2_2_5, bt_2_2_6, bt_2_2_7, bt_2_2_8, bt_2_2_9, bt_2_2_10, bt_2_2_11, bt_2_2_12, bt_2_2_13, bt_2_2_14);
}
/*input.sk:120*/

void main__WrapperNospec (int bt_0_0_0, int bt_0_0_1, int bt_0_0_2, int bt_0_0_3, bit bt_1_0_0, bit bt_1_1_0, bit bt_1_2_0, bit bt_2_0_0, bit bt_2_0_1, bit bt_2_0_2, bit bt_2_0_3, bit bt_2_0_4, bit bt_2_0_5, bit bt_2_0_6, bit bt_2_0_7, bit bt_2_0_8, bit bt_2_0_9, bit bt_2_0_10, bit bt_2_0_11, bit bt_2_0_12, bit bt_2_0_13, bit bt_2_0_14, bit bt_2_1_0, bit bt_2_1_1, bit bt_2_1_2, bit bt_2_1_3, bit bt_2_1_4, bit bt_2_1_5, bit bt_2_1_6, bit bt_2_1_7, bit bt_2_1_8, bit bt_2_1_9, bit bt_2_1_10, bit bt_2_1_11, bit bt_2_1_12, bit bt_2_1_13, bit bt_2_1_14, bit bt_2_2_0, bit bt_2_2_1, bit bt_2_2_2, bit bt_2_2_3, bit bt_2_2_4, bit bt_2_2_5, bit bt_2_2_6, bit bt_2_2_7, bit bt_2_2_8, bit bt_2_2_9, bit bt_2_2_10, bit bt_2_2_11, bit bt_2_2_12, bit bt_2_2_13, bit bt_2_2_14)/*input.sk:120*/
{ }
/*input.sk:74*/

void not_equivalence_bt_1 ()/*input.sk:74*/
{
  bt_1@ANONYMOUS a = new bt_1(v0=0);
  bt_1@ANONYMOUS b;
  b = new bt_1(v0=1);
  bit _out_s195 = 0;
  eq_bt_1(a, b, _out_s195);
  assert (!(_out_s195)); //Assert at input.sk:77 (0)
  bit _out_s197 = 0;
  compare_bt_1(a, b, _out_s197);
  assert (_out_s197); //Assert at input.sk:78 (0)
}
/*input.sk:74*/

void not_equivalence_bt_1__Wrapper ()  implements not_equivalence_bt_1__WrapperNospec/*input.sk:74*/
{
  not_equivalence_bt_1();
}
/*input.sk:74*/

void not_equivalence_bt_1__WrapperNospec ()/*input.sk:74*/
{ }
/*input.sk:97*/

void not_equivalence_bt_2 ()/*input.sk:97*/
{
  bt_2@ANONYMOUS a = new bt_2(v0=1, v1=1, v2=0, v3=1, v4=0, v5=1, v6=0, v7=0, v8=0, v9=0, v10=1, v11=0, v12=0, v13=1, v14=1);
  bt_2@ANONYMOUS b;
  b = new bt_2(v0=1, v1=1, v2=0, v3=1, v4=0, v5=1, v6=1, v7=0, v8=0, v9=0, v10=1, v11=0, v12=0, v13=1, v14=1);
  bit _out_s191 = 0;
  eq_bt_2(a, b, _out_s191);
  assert (!(_out_s191)); //Assert at input.sk:100 (0)
  bit _out_s193 = 0;
  compare_bt_2(a, b, _out_s193);
  assert (_out_s193); //Assert at input.sk:101 (0)
}
/*input.sk:97*/

void not_equivalence_bt_2__Wrapper ()  implements not_equivalence_bt_2__WrapperNospec/*input.sk:97*/
{
  not_equivalence_bt_2();
}
/*input.sk:97*/

void not_equivalence_bt_2__WrapperNospec ()/*input.sk:97*/
{ }
/*input.sk:104*/

void prod_0_sem_0 (bt_0 b0, bt_2 b2, ref bt_1 _out)/*input.sk:104*/
{
  _out = new bt_1(v0=b2.v4);
  return;
}
/*input.sk:116*/

void prod_10_sem_0 (bt_0 b0, bt_2 b2, ref bt_2 _out)/*input.sk:116*/
{
  _out = new bt_2(v0=1, v1=b2.v1, v2=(b2.v2) || ((b2.v1) && (b2.v6)), v3=(((b2.v3) || ((b2.v2) && (b2.v10))) || ((b2.v1) && (b2.v7))) || (((b2.v1) && (b2.v6)) && (b2.v10)), v4=(((((((b2.v4) || ((b2.v3) && (b2.v13))) || ((b2.v2) && (b2.v11))) || ((b2.v1) && (b2.v8))) || (((b2.v1) && (b2.v6)) && (b2.v11))) || (((b2.v1) && (b2.v7)) && (b2.v13))) || (((b2.v2) && (b2.v10)) && (b2.v13))) || ((((b2.v1) && (b2.v6)) && (b2.v10)) && (b2.v13)), v5=1, v6=b2.v6, v7=(b2.v7) || ((b2.v6) && (b2.v10)), v8=(((b2.v8) || ((b2.v7) && (b2.v13))) || ((b2.v6) && (b2.v11))) || (((b2.v6) && (b2.v10)) && (b2.v13)), v9=1, v10=b2.v10, v11=(b2.v11) || ((b2.v10) && (b2.v13)), v12=1, v13=b2.v13, v14=1);
  return;
}
/*input.sk:108*/

void prod_8_sem_0 (bt_0 b0, bt_2 b2, bt_2 b3, ref bt_2 _out)/*input.sk:108*/
{
  _out = new bt_2(v0=(b2.v0) || (b3.v0), v1=(b2.v1) || (b3.v1), v2=(b2.v2) || (b3.v2), v3=(b2.v3) || (b3.v3), v4=(b2.v4) || (b3.v4), v5=(b2.v5) || (b3.v5), v6=(b2.v6) || (b3.v6), v7=(b2.v7) || (b3.v7), v8=(b2.v8) || (b3.v8), v9=(b2.v9) || (b3.v9), v10=(b2.v10) || (b3.v10), v11=(b2.v11) || (b3.v11), v12=(b2.v12) || (b3.v12), v13=(b2.v13) || (b3.v13), v14=(b2.v14) || (b3.v14));
  return;
}
/*input.sk:112*/

void prod_9_sem_0 (bt_0 b0, bt_2 b2, bt_2 b3, ref bt_2 _out)/*input.sk:112*/
{
  _out = new bt_2(v0=(b2.v0) && (b3.v0), v1=((b2.v0) && (b3.v1)) || ((b2.v1) && (b3.v5)), v2=(((b2.v0) && (b3.v2)) || ((b2.v1) && (b3.v6))) || ((b2.v2) && (b3.v9)), v3=((((b2.v0) && (b3.v3)) || ((b2.v1) && (b3.v7))) || ((b2.v2) && (b3.v10))) || ((b2.v3) && (b3.v12)), v4=(((((b2.v0) && (b3.v4)) || ((b2.v1) && (b3.v8))) || ((b2.v2) && (b3.v11))) || ((b2.v3) && (b3.v13))) || ((b2.v4) && (b3.v14)), v5=(b2.v5) && (b3.v5), v6=((b2.v5) && (b3.v6)) || ((b2.v6) && (b3.v9)), v7=(((b2.v5) && (b3.v7)) || ((b2.v6) && (b3.v10))) || ((b2.v7) && (b3.v12)), v8=((((b2.v5) && (b3.v8)) || ((b2.v6) && (b3.v11))) || ((b2.v7) && (b3.v13))) || ((b2.v8) && (b3.v14)), v9=(b2.v9) && (b3.v9), v10=((b2.v9) && (b3.v10)) || ((b2.v10) && (b3.v12)), v11=(((b2.v9) && (b3.v11)) || ((b2.v10) && (b3.v13))) || ((b2.v11) && (b3.v14)), v12=(b2.v12) && (b3.v12), v13=((b2.v12) && (b3.v13)) || ((b2.v13) && (b3.v14)), v14=(b2.v14) && (b3.v14));
  return;
}
/* END PACKAGE ANONYMOUS*/
[SKETCH] DONE
Total time = 11346
