struct bt_2 {
    bit v0;
}
bit eq_bt_2 (bt_2 a, bt_2 b) {
    return a.v0 == b.v0;
}

bit compare_bt_2 (bt_2 a, bt_2 b) {
    return !b.v0 || a.v0;
}

generator bit overlap_atom_bit (bit a, bit b) {
    int t = ??;
    if(t == 0) {
        return a && b;
    }
    if(t == 1) {
        return a || b;
    }
    if(t == 2) {
        return a == b;
    }
    if(t == 3) {
        return a != b;
    }
    if(t == 4) {
        return !(a || b);
    }
    if(t == 5) {
        return 0;
    }
    return 1;
}

generator int overlap_atom_int (int a, int b) {
    int t = ??;
    if(t == 0) {
        return a < b ? a : b;
    }
    if(t == 1) {
        return a > b ? a : b;
    }
    if(t == 2) {
        return -100;
    }
    if(t == 3) {
        return 100;
    }
    return 0;
}

bt_2 bt_2_meet_incomparable (bt_2 a, bt_2 b) {
    return new bt_2(v0 = overlap_atom_bit(a.v0, b.v0));
}

void test_meet_incomparable (bt_2 a, bt_2 b) {
    if(!(compare_bt_2(a, b) || compare_bt_2(b, a))) {
        bt_2 meet_incomparable_ab = bt_2_meet_incomparable(a, b);
        assert(compare_bt_2(meet_incomparable_ab, a) && compare_bt_2(meet_incomparable_ab, b));
    }
}

harness void forall_test_meet_incomparable (bit a_v0, bit b_v0) {
    // Assemble structs
    bt_2 a = new bt_2(v0 = a_v0);
    bt_2 b = new bt_2(v0 = b_v0);
    test_meet_incomparable(a, b);
}

