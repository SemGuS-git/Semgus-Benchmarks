struct bt_1 {
    int v0;
}
bit eq_bt_1 (bt_1 a, bt_1 b) {
    return a.v0 == b.v0;
}

bit compare_bt_1 (bt_1 a, bt_1 b) {
    return a.v0 >= b.v0;
}

generator bit overlap_atom_bit (bit a, bit b) {
    int t = ??;
    if(t == 0) {
        return a && b;
    }
    if(t == 1) {
        return a || b;
    }
    if(t == 2) {
        return a == b;
    }
    if(t == 3) {
        return a != b;
    }
    if(t == 4) {
        return !(a || b);
    }
    if(t == 5) {
        return 0;
    }
    return 1;
}

generator int overlap_atom_int (int a, int b) {
    int t = ??;
    if(t == 0) {
        return a < b ? a : b;
    }
    if(t == 1) {
        return a > b ? a : b;
    }
    if(t == 2) {
        return -100;
    }
    if(t == 3) {
        return 100;
    }
    return 0;
}

bt_1 bt_1_join_incomparable (bt_1 a, bt_1 b) {
    return new bt_1(v0 = overlap_atom_int(a.v0, b.v0));
}

void test_join_incomparable (bt_1 a, bt_1 b) {
    if(!(compare_bt_1(a, b) || compare_bt_1(b, a))) {
        bt_1 join_incomparable_ab = bt_1_join_incomparable(a, b);
        assert(compare_bt_1(a, join_incomparable_ab) && compare_bt_1(b, join_incomparable_ab));
    }
}

harness void forall_test_join_incomparable (int a_v0, int b_v0) {
    // Assemble structs
    bt_1 a = new bt_1(v0 = a_v0 - 16);
    bt_1 b = new bt_1(v0 = b_v0 - 16);
    test_join_incomparable(a, b);
}

