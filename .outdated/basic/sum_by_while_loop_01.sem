(metadata :format-version "1.0.0")
(metadata :realizable true)
(metadata :author "Wiley Corning")

; basicTest_SumByWhileLoop_01

(declare-term-type Start.Term)
(declare-term-type S.Term)
(declare-term-type E.Term)
(declare-term-type B.Term)

(synth-term sum_by_while_loop Start.Term (
    (declare-var (start.t) Start.Term)
    (declare-var (s.t s.t1 s.t2) S.Term)
    (declare-var (e.t e.t1 e.t2) E.Term)
    (declare-var (b.t b.t1 b.t2) B.Term)
    (declare-var (x0 y0 z0 v0 w0) Int)
    (declare-var (x1 y1 z1 v1 w1) Int)
    (declare-var (x2 y2 z2 v2 w2) Int)
    (declare-var (e.r e.v1 e.v2) Int)
    (declare-var (b.r b.v1 b.v2) Bool)
    
    (declare-nt Start Start.Term (Start.Sem (Start.Term Int Int Int Int Int Int)))
    (declare-nt S S.Term (S.Sem (S.Term Int Int Int Int Int Int Int Int Int Int)))
    (declare-nt E E.Term (E.Sem (E.Term Int Int Int Int Int Int)))
    (declare-nt B B.Term (B.Sem (B.Term Int Int Int Int Int Bool)))
    
    ((Start start.t) (Start.Sem start.t x0 y0 z0 v0 w0 (! x2 :out))
        (($while (B b.t1) (S s.t1))
            (and
                (B.Sem b.t1 x0 y0 z0 v0 w0 b.v1)
                (= b.v1 true)                  ; Condition evaluates to true under G0
                (S.Sem s.t1 x0 y0 z0 v0 w0 x1 y1 z1 v1 w1) ; G0 -> G1: assign G1 by evaluating s on G0
                (S.Sem start.t  x1 y1 z1 v1 w1 x2 y2 z2 v2 w2) ; G1 -> G2: assign G2 by evaluating t on G1
            )
            (and
                (B.Sem b.t1 x0 y0 z0 v0 w0 b.v1)
                (= b.v1 false)                 ; Condition evaluates to false under G0
                (= x2 x0) (= y2 y0) (= z2 z0) (= v2 v0) (= w2 w0)  ; G2 := G0; do not execute s
            )
        )
    )
    
    ((S s.t) (S.Sem s.t x0 y0 z0 v0 w0 (! x2 :out) (! y2 :out) (! z2 :out) (! v2 :out) (! w2 :out))
        (($assign-x (E e.t1)) (and
            (E.Sem e.t1 x0 y0 z0 v0 w0 e.v1)
            (= x2 e.v1) (= y2 y0) (= z2 z0) (= v2 v0) (= w2 w0)
        ))
    )
    
    ((E e.t) (E.Sem e.t x0 y0 z0 v0 w0 (! e.r :out))
        ($1 (= e.r 1))
        ($x (= e.r x0))
        ($y (= e.r y0))
        ($z (= e.r z0))
        ($v (= e.r v0))
        ($w (= e.r w0))
        
        (($+ (E e.t1) (E e.t2)) (and
            (E.Sem e.t1 x0 y0 z0 v0 w0 e.v1)
            (E.Sem e.t2 x0 y0 z0 v0 w0 e.v2)
            (= e.r (+ e.v1 e.v2))
        ))
    )
    ((B b.t) (B.Sem b.t x0 y0 z0 v0 w0 (! b.r :out))
        (($lt_x (E e.t1)) (and
            (E.Sem e.t1 x0 y0 z0 v0 w0 e.v1)
            (= b.r (< x0 e.v1))
        ))
    )
))

(constraint (Start.Sem sum_by_while_loop 4 5 1 3 2 15)) ;{ y: 4, z: 5, v: 1, x: 3, w: 2, } -> { x: 15, }
(constraint (Start.Sem sum_by_while_loop 13 16 9 11 21 70)); { y: 13, z: 16, v: 9, x: 11, w: 21, } -> { x: 70, }
