(metadata :format-version "1.0.0")
(metadata :realizable true)
(metadata :author "Wiley Corning")

; no01_factorialTest_02

(declare-term-type Start.Term)
(declare-term-type S.Term)
(declare-term-type E.Term)
(declare-term-type B.Term)

(synth-term _fact S.Term (
    (declare-var (start.t) Start.Term)
    (declare-var (s.t s.t1 s.t2) S.Term)
    (declare-var (e.t e.t1 e.t2) E.Term)
    (declare-var (b.t b.t1 b.t2) B.Term)
    (declare-var (n0 r0) Int)
    (declare-var (n1 r1) Int)
    (declare-var (n2 r2) Int)
    (declare-var (e.r e.v1 e.v2) Int)
    (declare-var (b.r b.v1 b.v2) Bool)
    
    (declare-nt Start Start.Term (Start.Sem (Start.Term Int Int Int)))
    (declare-nt S S.Term (S.Sem (S.Term Int Int Int Int)))
    (declare-nt E E.Term (E.Sem (E.Term Int Int Int)))
    (declare-nt A E.Term (A.Sem (E.Term Int Int Int)))
    (declare-nt B B.Term (B.Sem (B.Term Int Int Bool)))
    
    ((Start start.t) (Start.Sem start.t n0 r0 (! r2 :out))
        ($pass (= r2 r0))
        (($while (B b.t1) (S s.t1))
            (and
                (B.Sem b.t1 n0 r0 b.v1)
                (= b.v1 true)                  ; Condition evaluates to true under G0
                (S.Sem s.t1 n0 r0 n1 r1) ; G0 -> G1: assign G1 by evaluating s on G0
                (Start.Sem start.t n1 r1 r2) ; G1 -> G2: assign G2 by evaluating t on G1
            )
            (and
                (B.Sem b.t1 n0 r0 b.v1)
                (= b.v1 false)                 ; Condition evaluates to false under G0
                (= r2 r0)            ; G2 := G0; do not execute s
            )
        )
    )
    
    ((S s.t) (S.Sem s.t n0 r0 (! n2 :out) (! r2 :out))
        (($assign-n (E e.t1)) (and
            (E.Sem e.t1 n0 r0 e.v1)
            (= n2 e.v1) (= r2 r0)
        ))
        (($assign-r (E e.t1)) (and
            (E.Sem e.t1 n0 r0 e.v1)
            (= n2 n0) (= r2 e.v1)
        ))
        
        (($cons (S s.t1) (S s.t2)) (and
            (S.Sem s.t1 n0 r0 n1 r1)
            (S.Sem s.t2 n1 r1 n2 r2)
        ))
    )
    ((E e.t) (E.Sem e.t n0 r0 (! e.r :out))
        (($* (A e.t1) (A e.t2)) (and
            (A.Sem e.t1 n0 r0 e.v1)
            (A.Sem e.t2 n0 r0 e.v2)
            (= e.r (* e.v1 e.v2))
        ))
        (($+ (A e.t1) (A e.t2)) (and
            (A.Sem e.t1 n0 r0 e.v1)
            (A.Sem e.t2 n0 r0 e.v2)
            (= e.r (+ e.v1 e.v2))
        ))
        (($- (A e.t1) (A e.t2)) (and
            (A.Sem e.t1 n0 r0 e.v1)
            (A.Sem e.t2 n0 r0 e.v2)
            (= e.r (- e.v1 e.v2))
        ))
    )
    ((A e.t) (A.Sem e.t n0 r0 (! e.r :out))
        ($r (= e.r r0))
        ($n (= e.r n0))
    )
    ((B b.t) (B.Sem b.t n0 r0 (! b.r :out))
        ($false (= b.r false))
        (($lt (A e.t1) (A e.t2)) (and
            (A.Sem e.t1 n0 r0 e.v1)
            (A.Sem e.t2 n0 r0 e.v2)
            (= b.r (< e.v1 e.v2))
        ))
    )
))

(constraint (Start.Sem _fact 0 1 1)) ; { n: 0, r: 1, } -> { r: 1, }
(constraint (Start.Sem _fact 1 1 1)) ; { n: 1, r: 1, } -> { r: 1, }
(constraint (Start.Sem _fact 2 1 2)) ; { n: 2, r: 1, } -> { r: 2, }
(constraint (Start.Sem _fact 3 1 6)) ; { n: 3, r: 1, } -> { r: 6, }