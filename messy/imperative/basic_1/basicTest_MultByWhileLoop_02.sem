// basicTest_MultByWhileLoop_02
(synth-fun _max ((x Int) (y Int) (c Int)) ((c_out Int))

(
    _Entry : (_Entry.Sem (Term Int Int Int Int)) : t
    [() (_Entry.Sem t x y c c_out)]
    (
        (Eval Start:_term0) [( (x_out Int) (y_out Int)) (and
            (= t (Eval _term0))
            (Start.Sem _term0 x y c x_out y_out c_out)
        )]
    )
)
(

    E : (E.Sem (Term Int Int Int Int)) : t
    [( (_result Int)) (E.Sem t x y c _result)]
    (

        // E ::= IntSingleTerm 1

        prod12 [() (and (= t (Leaf '1')) (= _result 1))]

        // E ::= IntSingleTerm $c

        prod13 [() (and (= t (Leaf 'c')) (= _result c))]

        // E ::= IntSingleTerm 0

        prod11 [() (and (= t (Leaf '0')) (= _result 0))]

        // E ::= Plus @E @E

        (prod16 E:_term0 E:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Plus _term0 _term1))
            (E.Sem _term0 x y c _term0_val) (E.Sem _term1 x y c _term1_val)
            (= _result (+ _term0_val _term1_val))
        )]
    )
)
(

    Start : (Start.Sem (Term Int Int Int Int Int Int)) : t
    [( (x_out Int) (y_out Int)) (Start.Sem t x y c x_out y_out c_out)]
    (

        // Start ::= While @B @S

        (prod0 B:_term0 S:_term1) [((_cond Bool) (x_temp Int) (y_temp Int) (c_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y c _cond)
            (= _cond true)
            (S.Sem _term1 x y c x_temp y_temp c_temp)
            (Start.Sem t x_temp y_temp c_temp x_out y_out c_out)
        )]
        (prod0 B:_term0 S:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y c _cond)
            (= _cond false)
            (= x_out x) (= y_out y) (= c_out c)
        )]
    )
)
(

    V : (V.Sem (Term Int Int Int Int)) : t
    [( (_result Int)) (V.Sem t x y c _result)]
    (

        // V ::= IntSingleTerm $y

        prod20 [() (and (= t (Leaf 'y')) (= _result y))]

        // V ::= IntSingleTerm $c

        prod18 [() (and (= t (Leaf 'c')) (= _result c))]

        // V ::= IntSingleTerm $x

        prod19 [() (and (= t (Leaf 'x')) (= _result x))]
    )
)
(

    NS : (NS.Sem (Term Int Int Int Int Int Int)) : t
    [( (x_out Int) (y_out Int)) (NS.Sem t x y c x_out y_out c_out)]
    (

        // NS ::= Seq @NS @NS

        (prod10 NS:_term0 NS:_term1) [((x_temp Int) (y_temp Int) (c_temp Int)) (and
            (= t (Seq _term0 _term1))
            (NS.Sem _term0 x y c x_temp y_temp c_temp)
            (NS.Sem _term1 x_temp y_temp c_temp x_out y_out c_out)
        )]

        // NS ::= IntAssign $c @E

        (prod6 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'c' _term0))
            (E.Sem _term0 x y c _temp)
            (= x_out x) (= y_out y) (= c_out _temp)
        )]
    )
)
(

    B : (B.Sem (Term Int Int Int Bool)) : t
    [( (_result Bool)) (B.Sem t x y c _result)]
    (

        // B ::= LT @V @V

        (prod17 V:_term0 V:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (LT _term0 _term1))
            (V.Sem _term0 x y c _term0_val) (V.Sem _term1 x y c _term1_val)
            (= _result (< _term0_val _term1_val))
        )]
    )
)
(

    S : (S.Sem (Term Int Int Int Int Int Int)) : t
    [( (x_out Int) (y_out Int)) (S.Sem t x y c x_out y_out c_out)]
    (

        // S ::= While @B @NS

        (prod2 B:_term0 NS:_term1) [((_cond Bool) (x_temp Int) (y_temp Int) (c_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y c _cond)
            (= _cond true)
            (NS.Sem _term1 x y c x_temp y_temp c_temp)
            (S.Sem t x_temp y_temp c_temp x_out y_out c_out)
        )]
        (prod2 B:_term0 NS:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y c _cond)
            (= _cond false)
            (= x_out x) (= y_out y) (= c_out c)
        )]
    )
)
)

(constraint
    (and
        (_Entry.Sem t 4 10 0 40)
        (_Entry.Sem t 5 6 0 30)
        (_Entry.Sem t 8 3 0 24)
    )
)
