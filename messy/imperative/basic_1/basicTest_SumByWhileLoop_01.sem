// AUTO GENERATED by ImperativeExampleConverter from basic_1.json
// basicTest_SumByWhileLoop_01
(synth-fun _max ((y Int) (z Int) (v Int) (x Int) (w Int)) ((x_out Int))

(
    _Entry : (_Entry.Sem (Term Int Int Int Int Int Int)) : t
    [() (_Entry.Sem t y z v x w x_out)]
    (
        (Eval Start:_term0) [( (y_out Int) (z_out Int) (v_out Int) (w_out Int)) (and
            (= t (Eval _term0))
            (Start.Sem _term0 y z v x w y_out z_out v_out x_out w_out)
        )]
    )
)
(

    Start : (Start.Sem (Term Int Int Int Int Int Int Int Int Int Int)) : t
    [( (y_out Int) (z_out Int) (v_out Int) (w_out Int)) (Start.Sem t y z v x w y_out z_out v_out x_out w_out)]
    (

        // Start ::= While @B @S

        (prod0 B:_term0 S:_term1) [((_cond Bool) (y_temp Int) (z_temp Int) (v_temp Int) (x_temp Int) (w_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 y z v x w _cond)
            (= _cond true)
            (S.Sem _term1 y z v x w y_temp z_temp v_temp x_temp w_temp)
            (Start.Sem t y_temp z_temp v_temp x_temp w_temp y_out z_out v_out x_out w_out)
        )]
        (prod0 B:_term0 S:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 y z v x w _cond)
            (= _cond false)
            (= y_out y) (= z_out z) (= v_out v) (= x_out x) (= w_out w)
        )]
    )
)
(

    B : (B.Sem (Term Int Int Int Int Int Bool)) : t
    [( (_result Bool)) (B.Sem t y z v x w _result)]
    (

        // B ::= LT $x @E

        (prod2 E:_term0) [((_term0_val Int)) (and
            (= t (LT 'x' _term0))
            (E.Sem _term0 y z v x w _term0_val)
            (= _result (< x _term0_val))
        )]
    )
)
(

    E : (E.Sem (Term Int Int Int Int Int Int)) : t
    [( (_result Int)) (E.Sem t y z v x w _result)]
    (

        // E ::= IntSingleTerm $x

        prod6 [() (and (= t (Leaf 'x')) (= _result x))]

        // E ::= IntSingleTerm $v

        prod4 [() (and (= t (Leaf 'v')) (= _result v))]

        // E ::= IntSingleTerm 1

        prod9 [() (and (= t (Leaf '1')) (= _result 1))]

        // E ::= IntSingleTerm $y

        prod7 [() (and (= t (Leaf 'y')) (= _result y))]

        // E ::= IntSingleTerm $z

        prod8 [() (and (= t (Leaf 'z')) (= _result z))]

        // E ::= IntSingleTerm $w

        prod5 [() (and (= t (Leaf 'w')) (= _result w))]

        // E ::= Plus @E @E

        (prod3 E:_term0 E:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Plus _term0 _term1))
            (E.Sem _term0 y z v x w _term0_val) (E.Sem _term1 y z v x w _term1_val)
            (= _result (+ _term0_val _term1_val))
        )]
    )
)
(

    S : (S.Sem (Term Int Int Int Int Int Int Int Int Int Int)) : t
    [( (y_out Int) (z_out Int) (v_out Int) (w_out Int)) (S.Sem t y z v x w y_out z_out v_out x_out w_out)]
    (

        // S ::= IntAssign $x @E

        (prod1 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'x' _term0))
            (E.Sem _term0 y z v x w _temp)
            (= y_out y) (= z_out z) (= v_out v) (= x_out _temp) (= w_out w)
        )]
    )
)
)

(constraint
    (and
        (_Entry.Sem t 4 5 1 3 2 15)
        (_Entry.Sem t 13 16 9 11 21 70)
    )
)
