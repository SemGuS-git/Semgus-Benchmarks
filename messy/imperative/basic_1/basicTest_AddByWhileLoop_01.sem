// basicTest_AddByWhileLoop_01
// (while (<y x) (assign-x (+ (x 1))))
(synth-fun _max ((x Int) (y Int)) ((x_out Int) (y_out Int))

(
    _Entry : (_Entry.Sem (Term Int Int Int Int)) : t
    [() (_Entry.Sem t x y x_out y_out)]
    (
        (Eval Start:_term0) [( ) (and
            (= t (Eval _term0))
            (Start.Sem _term0 x y x_out y_out)
        )]
    )
)
(

    Start : (Start.Sem (Term Int Int Int Int)) : t
    [( ) (Start.Sem t x y x_out y_out)]
    (

        // Start ::= IntAssign $x @E

        (prod0 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'x' _term0))
            (E.Sem _term0 x y _temp)
            (= x_out _temp) (= y_out y)
        )]

        // Start ::= IntAssign $y @E

        (prod1 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'y' _term0))
            (E.Sem _term0 x y _temp)
            (= x_out x) (= y_out _temp)
        )]

        // Start ::= While @B @Start

        (prod2 B:_term0 Start:_term1) [((_cond Bool) (x_temp Int) (y_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y _cond)
            (= _cond true)
            (Start.Sem _term1 x y x_temp y_temp)
            (Start.Sem t x_temp y_temp x_out y_out)
        )]
        (prod2 B:_term0 Start:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 x y _cond)
            (= _cond false)
            (= x_out x) (= y_out y)
        )]
    )
)
(

    B : (B.Sem (Term Int Int Bool)) : t
    [( (_result Bool)) (B.Sem t x y _result)]
    (

        // B ::= LT @E $y

        (prod3 E:_term0) [((_term0_val Int)) (and
            (= t (LT _term0 'y'))
            (E.Sem _term0 x y _term0_val)
            (= _result (< _term0_val y))
        )]
    )
)
(

    E : (E.Sem (Term Int Int Int)) : t
    [( (_result Int)) (E.Sem t x y _result)]
    (

        // E ::= IntSingleTerm $x

        prod4 [() (and (= t (Leaf 'x')) (= _result x))]

        // E ::= Plus @E @E

        (prod6 E:_term0 E:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Plus _term0 _term1))
            (E.Sem _term0 x y _term0_val) (E.Sem _term1 x y _term1_val)
            (= _result (+ _term0_val _term1_val))
        )]

        // E ::= IntSingleTerm 1

        prod5 [() (and (= t (Leaf '1')) (= _result 1))]
    )
)
)

(constraint
    (and
        (_Entry.Sem t 4 10 10 10)
        (_Entry.Sem t 12 20 20 20)
    )
)
