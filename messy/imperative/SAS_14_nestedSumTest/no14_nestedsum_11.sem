// AUTO GENERATED by ImperativeExampleConverter from SAS_14_nestedSumTest.json
// no14_nestedsum_11
(synth-fun _fact ((n Int) (r Int) (a Int)) ((r_out Int))

(
    _Entry : (_Entry.Sem (Term Int Int Int Int)) : t
    [() (_Entry.Sem t n r a r_out)]
    (
        (Eval Start:_term0) [( (n_out Int) (a_out Int)) (and
            (= t (Eval _term0))
            (Start.Sem _term0 n r a n_out r_out a_out)
        )]
    )
)
(

    A : (A.Sem (Term Int Int Int Int)) : t
    [( (_result Int)) (A.Sem t n r a _result)]
    (

        // A ::= IntSingleTerm $r

        prod8 [() (and (= t (Leaf 'r')) (= _result r))]

        // A ::= IntSingleTerm $a

        prod13 [() (and (= t (Leaf 'a')) (= _result a))]

        // A ::= IntSingleTerm 1

        prod6 [() (and (= t (Leaf '1')) (= _result 1))]

        // A ::= IntSingleTerm 0

        prod5 [() (and (= t (Leaf '0')) (= _result 0))]

        // A ::= IntSingleTerm $n

        prod7 [() (and (= t (Leaf 'n')) (= _result n))]
    )
)
(

    Start : (Start.Sem (Term Int Int Int Int Int Int)) : t
    [( (n_out Int) (a_out Int)) (Start.Sem t n r a n_out r_out a_out)]
    (

        // Start ::= While @B @S

        (prod0 B:_term0 S:_term1) [((_cond Bool) (n_temp Int) (r_temp Int) (a_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 n r a _cond)
            (= _cond true)
            (S.Sem _term1 n r a n_temp r_temp a_temp)
            (Start.Sem t n_temp r_temp a_temp n_out r_out a_out)
        )]
        (prod0 B:_term0 S:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 n r a _cond)
            (= _cond false)
            (= n_out n) (= r_out r) (= a_out a)
        )]
    )
)
(

    E : (E.Sem (Term Int Int Int Int)) : t
    [( (_result Int)) (E.Sem t n r a _result)]
    (

        // E ::= Plus @A @A

        (prod9 A:_term0 A:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Plus _term0 _term1))
            (A.Sem _term0 n r a _term0_val) (A.Sem _term1 n r a _term1_val)
            (= _result (+ _term0_val _term1_val))
        )]

        // E ::= Minus @A @A

        (prod10 A:_term0 A:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Minus _term0 _term1))
            (A.Sem _term0 n r a _term0_val) (A.Sem _term1 n r a _term1_val)
            (= _result (- _term0_val _term1_val))
        )]
    )
)
(

    B : (B.Sem (Term Int Int Int Bool)) : t
    [( (_result Bool)) (B.Sem t n r a _result)]
    (

        // B ::= LT $n 0

        prod1 [() (and
            (= t (LT 'n' '0'))
            
            (= _result (< n 0))
        )]
    )
)
(

    S1 : (S1.Sem (Term Int Int Int Int Int Int)) : t
    [( (n_out Int) (a_out Int)) (S1.Sem t n r a n_out r_out a_out)]
    (

        // S1 ::= IntAssign $r @E

        (prod4 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'r' _term0))
            (E.Sem _term0 n r a _temp)
            (= n_out n) (= r_out _temp) (= a_out a)
        )]

        // S1 ::= IntAssign $n @E

        (prod3 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'n' _term0))
            (E.Sem _term0 n r a _temp)
            (= n_out _temp) (= r_out r) (= a_out a)
        )]

        // S1 ::= IntAssign $a @E

        (prod12 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'a' _term0))
            (E.Sem _term0 n r a _temp)
            (= n_out n) (= r_out r) (= a_out _temp)
        )]
    )
)
(

    S : (S.Sem (Term Int Int Int Int Int Int)) : t
    [( (n_out Int) (a_out Int)) (S.Sem t n r a n_out r_out a_out)]
    (

        // S ::= Seq @S1 @S2

        (prod2 S1:_term0 S2:_term1) [((n_temp Int) (r_temp Int) (a_temp Int)) (and
            (= t (Seq _term0 _term1))
            (S1.Sem _term0 n r a n_temp r_temp a_temp)
            (S2.Sem _term1 n_temp r_temp a_temp n_out r_out a_out)
        )]
    )
)
(

    S2 : (S2.Sem (Term Int Int Int Int Int Int)) : t
    [( (n_out Int) (a_out Int)) (S2.Sem t n r a n_out r_out a_out)]
    (

        // S2 ::= While @B @S1

        (prod15 B:_term0 S1:_term1) [((_cond Bool) (n_temp Int) (r_temp Int) (a_temp Int)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 n r a _cond)
            (= _cond true)
            (S1.Sem _term1 n r a n_temp r_temp a_temp)
            (S2.Sem t n_temp r_temp a_temp n_out r_out a_out)
        )]
        (prod15 B:_term0 S1:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 n r a _cond)
            (= _cond false)
            (= n_out n) (= r_out r) (= a_out a)
        )]
    )
)
)

(constraint
    (and
        (_Entry.Sem t 1 0 0 1) // { n: 1, r: 0, a: 0, } -> { r: 1, }
        (_Entry.Sem t 2 0 0 4) // { n: 2, r: 0, a: 0, } -> { r: 4, }
        (_Entry.Sem t 3 0 0 10) // { n: 3, r: 0, a: 0, } -> { r: 10, }
        (_Entry.Sem t 4 0 0 20) // { n: 4, r: 0, a: 0, } -> { r: 20, }
    )
)
