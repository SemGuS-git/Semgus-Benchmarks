// AUTO GENERATED by ImperativeExampleConverter from SAS_28_sumprodsTest.json
// no28_sumprods_07
(synth-fun _arrsum ((arr2 IArray) (r Int) (i Int) (len Int) (arr IArray)) ((r_out Int))

(
    _Entry : (_Entry.Sem (Term IArray Int Int Int IArray Int)) : t
    [() (_Entry.Sem t arr2 r i len arr r_out)]
    (
        (Eval Start:_term0) [( (arr2_out IArray) (i_out Int) (len_out Int) (arr_out IArray)) (and
            (= t (Eval _term0))
            (Start.Sem _term0 arr2 r i len arr arr2_out r_out i_out len_out arr_out)
        )]
    )
)
(

    A : (A.Sem (Term IArray Int Int Int IArray Int)) : t
    [( (_result Int)) (A.Sem t arr2 r i len arr _result)]
    (

        // A ::= IntSingleTerm $r

        prod8 [() (and (= t (Leaf 'r')) (= _result r))]

        // A ::= IntSingleTerm $len

        prod7 [() (and (= t (Leaf 'len')) (= _result len))]

        // A ::= IntSingleTerm $i

        prod13 [() (and (= t (Leaf 'i')) (= _result i))]
    )
)
(

    Start : (Start.Sem (Term IArray Int Int Int IArray IArray Int Int Int IArray)) : t
    [( (arr2_out IArray) (i_out Int) (len_out Int) (arr_out IArray)) (Start.Sem t arr2 r i len arr arr2_out r_out i_out len_out arr_out)]
    (

        // Start ::= While @B @S

        (prod0 B:_term0 S:_term1) [((_cond Bool) (arr2_temp IArray) (r_temp Int) (i_temp Int) (len_temp Int) (arr_temp IArray)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 arr2 r i len arr _cond)
            (= _cond true)
            (S.Sem _term1 arr2 r i len arr arr2_temp r_temp i_temp len_temp arr_temp)
            (Start.Sem t arr2_temp r_temp i_temp len_temp arr_temp arr2_out r_out i_out len_out arr_out)
        )]
        (prod0 B:_term0 S:_term1) [((_cond Bool)) (and
            (= t (While _term0 _term1))
            (B.Sem _term0 arr2 r i len arr _cond)
            (= _cond false)
            (= arr2_out arr2) (= r_out r) (= i_out i) (= len_out len) (= arr_out arr)
        )]
    )
)
(

    S1 : (S1.Sem (Term IArray Int Int Int IArray IArray Int Int Int IArray)) : t
    [( (arr2_out IArray) (i_out Int) (len_out Int) (arr_out IArray)) (S1.Sem t arr2 r i len arr arr2_out r_out i_out len_out arr_out)]
    (

        // S1 ::= IArrayUpdate $arr @A @E

        (prod16 A:_term0 E:_term1) [((_index Int) (_value Int)) (and
            (= t (IArrayUpdate 'arr' _term0 _term1))
            (A.Sem _term0 arr2 r i len arr _index)
            (E.Sem _term1 arr2 r i len arr _value)
            (= arr_out (store arr _index _value))
            (= arr2_out arr2) (= r_out r) (= i_out i) (= len_out len)
        )]

        // S1 ::= IntAssign $r @E

        (prod4 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'r' _term0))
            (E.Sem _term0 arr2 r i len arr _temp)
            (= arr2_out arr2) (= r_out _temp) (= i_out i) (= len_out len) (= arr_out arr)
        )]

        // S1 ::= Seq @S1 @S1

        (prod21 S1:_term0 S1:_term1) [((arr2_temp IArray) (r_temp Int) (i_temp Int) (len_temp Int) (arr_temp IArray)) (and
            (= t (Seq _term0 _term1))
            (S1.Sem _term0 arr2 r i len arr arr2_temp r_temp i_temp len_temp arr_temp)
            (S1.Sem _term1 arr2_temp r_temp i_temp len_temp arr_temp arr2_out r_out i_out len_out arr_out)
        )]

        // S1 ::= IntAssign $len @E

        (prod3 E:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'len' _term0))
            (E.Sem _term0 arr2 r i len arr _temp)
            (= arr2_out arr2) (= r_out r) (= i_out i) (= len_out _temp) (= arr_out arr)
        )]
    )
)
(

    P : (P.Sem (Term IArray Int Int Int IArray Int)) : t
    [( (_result Int)) (P.Sem t arr2 r i len arr _result)]
    (

        // P ::= Plus $i 1

        prod17 [() (and
            (= t (Plus 'i' '1'))
            
            (= _result (+ i 1))
        )]
    )
)
(

    S2 : (S2.Sem (Term IArray Int Int Int IArray IArray Int Int Int IArray)) : t
    [( (arr2_out IArray) (i_out Int) (len_out Int) (arr_out IArray)) (S2.Sem t arr2 r i len arr arr2_out r_out i_out len_out arr_out)]
    (

        // S2 ::= IntAssign $i @P

        (prod14 P:_term0) [((_temp Int)) (and 
            (= t (IntAssign 'i' _term0))
            (P.Sem _term0 arr2 r i len arr _temp)
            (= arr2_out arr2) (= r_out r) (= i_out _temp) (= len_out len) (= arr_out arr)
        )]
    )
)
(

    B : (B.Sem (Term IArray Int Int Int IArray Bool)) : t
    [( (_result Bool)) (B.Sem t arr2 r i len arr _result)]
    (

        // B ::= LT $i $len

        prod1 [() (and
            (= t (LT 'i' 'len'))
            
            (= _result (< i len))
        )]
    )
)
(

    S : (S.Sem (Term IArray Int Int Int IArray IArray Int Int Int IArray)) : t
    [( (arr2_out IArray) (i_out Int) (len_out Int) (arr_out IArray)) (S.Sem t arr2 r i len arr arr2_out r_out i_out len_out arr_out)]
    (

        // S ::= Seq @S1 @S2

        (prod2 S1:_term0 S2:_term1) [((arr2_temp IArray) (r_temp Int) (i_temp Int) (len_temp Int) (arr_temp IArray)) (and
            (= t (Seq _term0 _term1))
            (S1.Sem _term0 arr2 r i len arr arr2_temp r_temp i_temp len_temp arr_temp)
            (S2.Sem _term1 arr2_temp r_temp i_temp len_temp arr_temp arr2_out r_out i_out len_out arr_out)
        )]
    )
)
(

    E : (E.Sem (Term IArray Int Int Int IArray Int)) : t
    [( (_result Int)) (E.Sem t arr2 r i len arr _result)]
    (

        // E ::= Plus @A @A

        (prod9 A:_term0 A:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Plus _term0 _term1))
            (A.Sem _term0 arr2 r i len arr _term0_val) (A.Sem _term1 arr2 r i len arr _term1_val)
            (= _result (+ _term0_val _term1_val))
        )]

        // E ::= Minus @A @A

        (prod10 A:_term0 A:_term1) [((_term0_val Int) (_term1_val Int)) (and
            (= t (Minus _term0 _term1))
            (A.Sem _term0 arr2 r i len arr _term0_val) (A.Sem _term1 arr2 r i len arr _term1_val)
            (= _result (- _term0_val _term1_val))
        )]
    )
)
)

(constraint
    (and
        (_Entry.Sem t (array.init 3 4) 0 0 2 (array.init 1 2) 11)
        (_Entry.Sem t (array.init 1 2 3) 0 0 3 (array.init 1 2 3) 14)
        (_Entry.Sem t (array.init 2 3 4) 0 0 3 (array.init 1 2 3) 20)
    )
)
