// AUTO GENERATED by ImperativeExampleConverter from basic_bv.json
// BVtest_XOR_02
(synth-fun _max ((x BitVec) (y BitVec)) ((x_out BitVec))

(
    _Entry : (_Entry.Sem (Term BitVec BitVec BitVec)) : t
    [() (_Entry.Sem t x y x_out)]
    (
        (Eval Start:_term0) [( (y_out BitVec)) (and
            (= t (Eval _term0))
            (Start.Sem _term0 x y x_out y_out)
        )]
    )
)
(

    E : (E.Sem (Term BitVec BitVec BitVec)) : t
    [( (_result BitVec)) (E.Sem t x y _result)]
    (

        // E ::= BVSingleTerm $y

        prod7 [() (and (= t (Leaf 'y')) (= _result y))]

        // E ::= BVAnd @E @E

        (prod2 E:_term0 E:_term1) [((_term0_val BitVec) (_term1_val BitVec)) (and
            (= t (BVAnd _term0 _term1))
            (E.Sem _term0 x y _term0_val) (E.Sem _term1 x y _term1_val)
            (= _result (bvand _term0_val _term1_val))
        )]

        // E ::= BVSingleTerm $x

        prod6 [() (and (= t (Leaf 'x')) (= _result x))]

        // E ::= BVNeg @E

        (prod8 E:_term0) [((_term0_val BitVec)) (and
            (= t (BVNeg _term0))
            (E.Sem _term0 x y _term0_val)
            (= _result (bvnot _term0_val))
        )]

        // E ::= BVOr @E @E

        (prod5 E:_term0 E:_term1) [((_term0_val BitVec) (_term1_val BitVec)) (and
            (= t (BVOr _term0 _term1))
            (E.Sem _term0 x y _term0_val) (E.Sem _term1 x y _term1_val)
            (= _result (bvor _term0_val _term1_val))
        )]
    )
)
(

    Start : (Start.Sem (Term BitVec BitVec BitVec BitVec)) : t
    [( (y_out BitVec)) (Start.Sem t x y x_out y_out)]
    (

        // Start ::= BVAssign $x @E

        (prod0 E:_term0) [((_temp BitVec)) (and 
            (= t (BVAssign 'x' _term0))
            (E.Sem _term0 x y _temp)
            (= x_out _temp) (= y_out y)
        )]
    )
)
)

(constraint
    (and
        (_Entry.Sem t #x00000009 #x00000006 #x0000000f) // { x: 9, y: 6, } -> { x: 15, }
        (_Entry.Sem t #x000000f7 #x0000002c #x000000db) // { x: 247, y: 44, } -> { x: 219, }
    )
)
