(declare-term-types
((E 0) (Start 0))
((($IBVVary )
($IBVVarx )
($bvxor E E))
(($seq Start Start)
($bv=x E)
($bv=y E))))


(define-funs-rec
((E.Sem ((E_term_0 E) (r__0 (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 32))) Bool)
(Start.Sem ((Start_term_0 Start) (x_r0 (_ BitVec 32)) (y_r0 (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 32))) Bool))

((match E_term_0
  (($IBVVary (exists ((r__1 (_ BitVec 32))) (and (= r__0 r__1)
  (= r__1 y))))
($IBVVarx (exists ((r__1 (_ BitVec 32))) (and (= r__0 r__1)
  (= r__1 x))))
(($bvxor E_term_1 E_term_2) (exists ((r__1 (_ BitVec 32)) (r__2 (_ BitVec 32))) (and (= r__0 (bvor (bvand r__1 (bvnot r__2)) (bvand (bvnot r__1) r__2)))
  (E.Sem E_term_1 r__1 x y)
  (E.Sem E_term_2 r__2 x y))))))
(match Start_term_0
  ((($seq Start_term_1 Start_term_2) (exists ((x_r1 (_ BitVec 32)) (y_r1 (_ BitVec 32))) (and (Start.Sem Start_term_1 x_r1 y_r1 x y)
  (Start.Sem Start_term_2 x_r0 y_r0 x_r1 y_r1))))
(($bv=x E_term_1) (exists ((r__1 (_ BitVec 32))) (and (and (= x r__1)
  (= y y_r0))
  (E.Sem E_term_1 r__1 x y))))
(($bv=y E_term_1) (exists ((r__1 (_ BitVec 32))) (and (and (= x x_r0)
  (= y r__1))
  (E.Sem E_term_1 r__1 x y))))))))


(synth-fun BVtest_Swap_XOR_03() Start)


(constraint (Start.Sem BVtest_Swap_XOR_03 #x00000009 #x00000006 #x00000006 #x00000009))
(constraint (Start.Sem BVtest_Swap_XOR_03 #x000000f7 #x0000002c #x0000002c #x000000f7))

(check-synth)