{% macro str(name) %}{% for i in range(0,n) %}{{name}}_{{i}} {%endfor%}{%endmacro%}
{% macro mat(name) %}{% for i in range(0,n+1) %}{% for j in range (i, n+1) %}{{name}}_{{i}}_{{j}} {%endfor%}{%endfor%}{%endmacro%}
{% macro mat_out(name) %}{% for i in range(0,n+1) %}{% for j in range (i, n+1) %}(! {{name}}_{{i}}_{{j}} :out) {%endfor%}{%endfor%}{%endmacro%}
{% macro dec_str(name) %}(declare-var ({% for i in range(0,n) %}{{name}}_{{i}} {%endfor%}) Int){%endmacro%}
{% macro dec_mat(name) %}(declare-var ({% for i in range(0,n+1) %}{% for j in range (i, n+1) %}{{name}}_{{i}}_{{j}} {%endfor%}{%endfor%}) Bool){%endmacro%}
{% macro t_str() %}{%for i in range(0,n)%}Int {%endfor%}{%endmacro%}
{% macro t_mat() %}{% for i in range(0,n+1) %}{% for j in range (i, n+1) %}Bool {%endfor%}{%endfor%}{%endmacro%}

{% macro eq_false(name) %}{% for i in range(0,n+1) %}
                {% for j in range (i, n+1) %}(= {{name}}_{{i}}_{{j}} false) {%endfor%}{%endfor%}{%endmacro%}

{% macro eq_id(name) %}{% for i in range(0,n+1) %}
                {% for j in range (i, n+1) %}(= {{name}}_{{i}}_{{j}} {% if (i==j) %}true{%else%}false{%endif%}) {%endfor%}{%endfor%}{%endmacro%}

{% macro eq_any(name) %}{% for i in range(0,n+1) %}
                {% for j in range (i, n+1) %}(= {{name}}_{{i}}_{{j}} {% if (i+1==j) %}true{%else%}false{%endif%}) {%endfor%}{%endfor%}{%endmacro%}

{% macro eq_char(s,m,c) %}{% for i in range(0,n+1) %}
                {% for j in range (i, n+1) %}(= {{m}}_{{i}}_{{j}} {% if (i+1==j) %}(or (= {{s}}_{{i}} {{c}}) (= {{s}}_{{i}} {{sigma_neg}})){%else%}false{%endif%}) {%endfor%}{%endfor%}{%endmacro%}

(metadata :format-version "1.0.0")
{% if author is defined %}(metadata :author "{{ author }}"){% endif %}
{% if description is defined %}(metadata :description "{{ description }}"){% endif %}

; string length: {{ n }}

(declare-term-type Start.Term)
(declare-term-type R.Term)

(synth-term match_regex Start.Term (
    (declare-nt Start Start.Term (Start.Sem Start.Term Int {{t_str()}}Bool))
    (declare-nt R R.Term (R.Sem Start.Term Int {{t_str()}}{{t_mat()}}))
    
    (declare-var start.t Start.Term)
    (declare-var (r.t r.t1 r.t2) R.Term)
    
    (declare-var len Int)
    {{ dec_str(s) }}
    (declare-var result Bool)
    (declare-var nxt Int)
    {{ dec_mat(X) }}
    {{ dec_mat(A) }}
    {{ dec_mat(B) }}
    
    ((Start start.t) (Start.Sem start.t len {{str(s)}} (! result :out))
    ; Evaluate regex on all substrings, return corner element
        (($eval (R r.t)){% for k in range(0,n+1) %}
            (and (= len {{k}}) (R.Sem r.t len {{str(s)}} {{mat(X)}}) (= result {{X}}_0_{{k}}) ){% endfor %}
        )
    )
    
    ((R r.t) (R.Sem r.t len {{str(s)}} {{mat_out(X)}})
        ($eps
            (and{{eq_id(X)}}
            )
        )
        
{% if include_phi is defined and include_phi %}
        ; phi: zero matrix (empty set)
        ($phi
            (and{{eq_false(X)}}
            )
        )
{% else %}
        ; phi production is omitted
{% endif %}
    
        ; any (regex dot)
        ($any
            (and{{eq_any(X)}}
        ))
        
        ; characters (with negative sigma)
{% for c in charset %}
        ; character {{c}}
        (${{c}}
            (and{{eq_char(s,X,c)}}
            )
        )
{% endfor %}
        
        ; Disjunction
        (($or (R r.t1) (R r.t2))
            (and
                (R.Sem r.t1 len {{str(s)}} {{mat(A)}})
                (R.Sem r.t2 len {{str(s)}} {{mat(B)}})
                
                ; X = A+B
                {%for i in range(0,n+1)%}{%for j in range(i, n+1)%}
                (= {{X}}_{{i}}_{{j}} (or {{A}}_{{i}}_{{j}} {{B}}_{{i}}_{{j}})){%endfor%}{%endfor%}
            )
        )
        
        
        ; Concatenation
        (($concat (R r.t1) (R r.t2))
            (and
                (R.Sem r.t1 len {{str(s)}} {{mat(A)}})
                (R.Sem r.t2 len {{str(s)}} {{mat(B)}})
                
                ; X = AB
                {%for i in range(0,n+1)%}{%for j in range(i, n+1)%}
                (= {{X}}_{{i}}_{{j}} (or {% for k in range(0, n+1)%}{% if i <= k and k <= j%}(and {{A}}_{{i}}_{{k}} {{B}}_{{k}}_{{j}}){%else%}                 {%endif%} {%endfor%})){%endfor%}{%endfor%}
            )
        )
        
        ; Kleene star with Logarithmic semantics
        (($star (R r.t1))
            ; Base case
            (and 
                (= 0 len) {{eq_id(X)}}
            )
            ; Inductive case (odd)
            (and
                (= 1 (mod len 2))
                (< 0 len)
                (= nxt (- len 1))
                (R.Sem r.t1 len {{str(s)}} {{mat(A)}})
                (R.Sem r.t  nxt {{str(s)}} {{mat(B)}})
                
                ; X_{k} = X_{k-1} X
                {%for i in range(0,n+1)%}{%for j in range(i, n+1)%}
                (= {{X}}_{{i}}_{{j}} (or {{B}}_{{i}}_{{j}} {% for k in range(0, n+1)%}{% if i <= k and k <= j%}(and {{A}}_{{i}}_{{k}} {{B}}_{{k}}_{{j}}){%else%}                 {%endif%} {%endfor%})){%endfor%}{%endfor%}
            )
            ; Inductive case (even)
            (and
                (and (< 0 len) (= 0 (mod len 2)))
                (= nxt (div len 2))
                (R.Sem r.t nxt {{str(s)}} {{mat(A)}})
                
                ; X_{k} = (X_{k/2} X_{k/2})
                {%for i in range(0,n+1)%}{%for j in range(i, n+1)%}
                (= {{X}}_{{i}}_{{j}} (or {% for k in range(0, n+1)%}{% if i <= k and k <= j%}(and {{A}}_{{i}}_{{k}} {{A}}_{{k}}_{{j}}){%else%}                 {%endif%} {%endfor%})){%endfor%}{%endfor%}
            )
        )
    )
))

{% if description is defined %}; {{ description }}{% endif %}
{%for example in examples %}
(constraint (Start.Sem match_regex {{ example.i | length }} {%for ival in example.i%}{{ival}} {%endfor%}{%for i in range(example.i | length,n)%}{{NA}} {%endfor%}{{example.o | lower}})){%endfor%}
