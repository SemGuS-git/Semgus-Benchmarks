// GCPE_17: at least one 0 and at most one 1
(synth-fun match_regex ( (len Int) (s String) ) ((result Bool)) (
  Start : (Start.Sem(Term Int String Bool)) : t
  [( ) (Start.Sem t len s result)]
  (
    // Evaluate regex on all substrings, return corner element
    (eval R:r) [ ((X BoolMat) ) (and (= t (Eval r)) (R.Sem r len s X) (= result (bmat.get X 0 len)) ) ]
  )
)
(
  R : (R.Sem(Term Int String BoolMat )) : t
  [ ((X BoolMat)) (R.Sem t len s  X ) ]
  (
    // epsilon: identity matrix (set of empty strings)
    eps [() (and (= t (Leaf 'eps')) (= X (bmat.identity s))  )]
    
    // phi: zero matrix (empty set)
    phi [() (and (= t (Leaf 'phi')) (= X (bmat.zero s))  )]
    
    // characters
    char_0 [() (and (= t (Leaf '0')) (= X (bmat.char s '0')) ) ]
    char_1 [() (and (= t (Leaf '1')) (= X (bmat.char s '1')) ) ]

    // any (regex dot)
    any [() (and (= t (Leaf '.')) (= X (bmat.any s))  )]
    
    // Disjunction
    (or R:t1 R:t2)
    [
        (
            (A BoolMat) 
            (B BoolMat) 
        )
        (and
            (= t (Or t1 t2))
            (R.Sem t1 len s  A )
            (R.Sem t2 len s  B )
            
            // X = A+B
            (= X (bmat.plus A B))
        )
    ]
    
    // Concatenation
    (concat R:t1 R:t2)
    [
        (
            (A BoolMat) 
            (B BoolMat) 
        )
        (and
            (= t (Concat t1 t2))
            (R.Sem t1 len s  A )
            (R.Sem t2 len s  B )
            
            // X = AB
            (= X (bmat.matmul A B))
        )
    ]
    
    // Star: base case
    (star R:t1)
    [ () (and (= t (Star t1)) (= len 0) (= X (bmat.identity s)) )]
    
    // Star: inductive case
    (star R:t1)
    [
        (
            (kpr Int)
            (A BoolMat)  // X
            (B BoolMat)  // X_{k-1}
        )
        (and
            (= t (Star t1))
            (< 0 len)
            (= kpr (- len 1))
            (R.Sem t1 len s  A )
            (R.Sem t  kpr s  B )
            
            // X = (X X_{k-1}) + X_{k-1}
            (= X (bmat.plus (bmat.matmul A B) B))
        )
    ]
  )
)
)

// GCPE_17: at least one 0 and at most one 1

(constraint
    (and
        (Start.Sem t 1 "0" true)
        (Start.Sem t 3 "001" true)
        (Start.Sem t 4 "0001" true)
        (Start.Sem t 4 "0010" true)
        (Start.Sem t 5 "01000" true)
        (Start.Sem t 6 "100000" true)
        (Start.Sem t 1 "1" false)
        (Start.Sem t 3 "101" false)
        (Start.Sem t 4 "0110" false)
        (Start.Sem t 4 "1010" false)
        (Start.Sem t 4 "1001" false)
        (Start.Sem t 5 "10001" false)
        (Start.Sem t 6 "111000" false)
        (Start.Sem t 9 "010000100" false)
        (Start.Sem t 9 "000101001" false)
    )
)