(metadata :format-version "1.0.0")
(metadata :author "Wiley Corning")
(metadata :description "GCPE_04: begins with 1, ends with 0")

; string length: 4

(declare-term-type Start.Term)
(declare-term-type R.Term)

(synth-term match_regex Start.Term (
    (declare-nt Start Start.Term (Start.Sem (Start.Term Int Int Int Int Int Bool)))
    (declare-nt R R.Term (R.Sem (R.Term Int Int Int Int Int Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool )))
    
    (declare-var start.t Start.Term)
    (declare-var (r.t r.t1 r.t2) R.Term)
    
    (declare-var len Int)
    (declare-var (s_0 s_1 s_2 s_3 ) Int)
    (declare-var result Bool)
    (declare-var nxt Int)
    (declare-var (X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) Bool)
    (declare-var (A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4 ) Bool)
    (declare-var (B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4 ) Bool)
    
    ((Start start.t) (Start.Sem start.t len s_0 s_1 s_2 s_3  (! result :out))
    ; Evaluate regex on all substrings, return corner element
        (($eval (R r.t))
            (and (= len 0) (R.Sem r.t len s_0 s_1 s_2 s_3  X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) (= result X_0_0) )
            (and (= len 1) (R.Sem r.t len s_0 s_1 s_2 s_3  X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) (= result X_0_1) )
            (and (= len 2) (R.Sem r.t len s_0 s_1 s_2 s_3  X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) (= result X_0_2) )
            (and (= len 3) (R.Sem r.t len s_0 s_1 s_2 s_3  X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) (= result X_0_3) )
            (and (= len 4) (R.Sem r.t len s_0 s_1 s_2 s_3  X_0_0 X_0_1 X_0_2 X_0_3 X_0_4 X_1_1 X_1_2 X_1_3 X_1_4 X_2_2 X_2_3 X_2_4 X_3_3 X_3_4 X_4_4 ) (= result X_0_4) )
        )
    )
    
    ((R r.t) (R.Sem r.t len s_0 s_1 s_2 s_3  (! X_0_0 :out) (! X_0_1 :out) (! X_0_2 :out) (! X_0_3 :out) (! X_0_4 :out) (! X_1_1 :out) (! X_1_2 :out) (! X_1_3 :out) (! X_1_4 :out) (! X_2_2 :out) (! X_2_3 :out) (! X_2_4 :out) (! X_3_3 :out) (! X_3_4 :out) (! X_4_4 :out) )
        ($eps
            (and
                (= X_0_0 true) (= X_0_1 false) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) 
                (= X_1_1 true) (= X_1_2 false) (= X_1_3 false) (= X_1_4 false) 
                (= X_2_2 true) (= X_2_3 false) (= X_2_4 false) 
                (= X_3_3 true) (= X_3_4 false) 
                (= X_4_4 true) 
            )
        )
        

        ; phi production is omitted

    
        ; any (regex dot)
        ($any
            (and
                (= X_0_0 false) (= X_0_1 true) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) 
                (= X_1_1 false) (= X_1_2 true) (= X_1_3 false) (= X_1_4 false) 
                (= X_2_2 false) (= X_2_3 true) (= X_2_4 false) 
                (= X_3_3 false) (= X_3_4 true) 
                (= X_4_4 false) 
        ))
        
        ; characters (with negative sigma)

        ; character 0
        ($0
            (and
                (= X_0_0 false) (= X_0_1 (or (= s_0 0) (= s_0 3))) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) 
                (= X_1_1 false) (= X_1_2 (or (= s_1 0) (= s_1 3))) (= X_1_3 false) (= X_1_4 false) 
                (= X_2_2 false) (= X_2_3 (or (= s_2 0) (= s_2 3))) (= X_2_4 false) 
                (= X_3_3 false) (= X_3_4 (or (= s_3 0) (= s_3 3))) 
                (= X_4_4 false) 
            )
        )

        ; character 1
        ($1
            (and
                (= X_0_0 false) (= X_0_1 (or (= s_0 1) (= s_0 3))) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) 
                (= X_1_1 false) (= X_1_2 (or (= s_1 1) (= s_1 3))) (= X_1_3 false) (= X_1_4 false) 
                (= X_2_2 false) (= X_2_3 (or (= s_2 1) (= s_2 3))) (= X_2_4 false) 
                (= X_3_3 false) (= X_3_4 (or (= s_3 1) (= s_3 3))) 
                (= X_4_4 false) 
            )
        )

        
        ; Disjunction
        (($or (R r.t1) (R r.t2))
            (and
                (R.Sem r.t1 len s_0 s_1 s_2 s_3  A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4 )
                (R.Sem r.t2 len s_0 s_1 s_2 s_3  B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4 )
                
                ; X = A+B
                
                (= X_0_0 (or A_0_0 B_0_0))
                (= X_0_1 (or A_0_1 B_0_1))
                (= X_0_2 (or A_0_2 B_0_2))
                (= X_0_3 (or A_0_3 B_0_3))
                (= X_0_4 (or A_0_4 B_0_4))
                (= X_1_1 (or A_1_1 B_1_1))
                (= X_1_2 (or A_1_2 B_1_2))
                (= X_1_3 (or A_1_3 B_1_3))
                (= X_1_4 (or A_1_4 B_1_4))
                (= X_2_2 (or A_2_2 B_2_2))
                (= X_2_3 (or A_2_3 B_2_3))
                (= X_2_4 (or A_2_4 B_2_4))
                (= X_3_3 (or A_3_3 B_3_3))
                (= X_3_4 (or A_3_4 B_3_4))
                (= X_4_4 (or A_4_4 B_4_4))
            )
        )
        
        
        ; Concatenation
        (($concat (R r.t1) (R r.t2))
            (and
                (R.Sem r.t1 len s_0 s_1 s_2 s_3  A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4 )
                (R.Sem r.t2 len s_0 s_1 s_2 s_3  B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4 )
                
                ; X = AB
                
                (= X_0_0 (or (and A_0_0 B_0_0)                                                                         ))
                (= X_0_1 (or (and A_0_0 B_0_1) (and A_0_1 B_1_1)                                                       ))
                (= X_0_2 (or (and A_0_0 B_0_2) (and A_0_1 B_1_2) (and A_0_2 B_2_2)                                     ))
                (= X_0_3 (or (and A_0_0 B_0_3) (and A_0_1 B_1_3) (and A_0_2 B_2_3) (and A_0_3 B_3_3)                   ))
                (= X_0_4 (or (and A_0_0 B_0_4) (and A_0_1 B_1_4) (and A_0_2 B_2_4) (and A_0_3 B_3_4) (and A_0_4 B_4_4) ))
                (= X_1_1 (or                   (and A_1_1 B_1_1)                                                       ))
                (= X_1_2 (or                   (and A_1_1 B_1_2) (and A_1_2 B_2_2)                                     ))
                (= X_1_3 (or                   (and A_1_1 B_1_3) (and A_1_2 B_2_3) (and A_1_3 B_3_3)                   ))
                (= X_1_4 (or                   (and A_1_1 B_1_4) (and A_1_2 B_2_4) (and A_1_3 B_3_4) (and A_1_4 B_4_4) ))
                (= X_2_2 (or                                     (and A_2_2 B_2_2)                                     ))
                (= X_2_3 (or                                     (and A_2_2 B_2_3) (and A_2_3 B_3_3)                   ))
                (= X_2_4 (or                                     (and A_2_2 B_2_4) (and A_2_3 B_3_4) (and A_2_4 B_4_4) ))
                (= X_3_3 (or                                                       (and A_3_3 B_3_3)                   ))
                (= X_3_4 (or                                                       (and A_3_3 B_3_4) (and A_3_4 B_4_4) ))
                (= X_4_4 (or                                                                         (and A_4_4 B_4_4) ))
            )
        )
        
        ; Kleene star with Logarithmic semantics
        (($star (R r.t1))
            ; Base case
            (and 
                (= 0 len) 
                (= X_0_0 true) (= X_0_1 false) (= X_0_2 false) (= X_0_3 false) (= X_0_4 false) 
                (= X_1_1 true) (= X_1_2 false) (= X_1_3 false) (= X_1_4 false) 
                (= X_2_2 true) (= X_2_3 false) (= X_2_4 false) 
                (= X_3_3 true) (= X_3_4 false) 
                (= X_4_4 true) 
            )
            ; Inductive case (odd)
            (and
                (= 1 (mod len 2))
                (< 0 len)
                (= nxt (- len 1))
                (R.Sem r.t1 len s_0 s_1 s_2 s_3  A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4 )
                (R.Sem r.t  nxt s_0 s_1 s_2 s_3  B_0_0 B_0_1 B_0_2 B_0_3 B_0_4 B_1_1 B_1_2 B_1_3 B_1_4 B_2_2 B_2_3 B_2_4 B_3_3 B_3_4 B_4_4 )
                
                ; X_{k} = X_{k-1} X
                
                (= X_0_0 (or B_0_0 (and A_0_0 B_0_0)                                                                         ))
                (= X_0_1 (or B_0_1 (and A_0_0 B_0_1) (and A_0_1 B_1_1)                                                       ))
                (= X_0_2 (or B_0_2 (and A_0_0 B_0_2) (and A_0_1 B_1_2) (and A_0_2 B_2_2)                                     ))
                (= X_0_3 (or B_0_3 (and A_0_0 B_0_3) (and A_0_1 B_1_3) (and A_0_2 B_2_3) (and A_0_3 B_3_3)                   ))
                (= X_0_4 (or B_0_4 (and A_0_0 B_0_4) (and A_0_1 B_1_4) (and A_0_2 B_2_4) (and A_0_3 B_3_4) (and A_0_4 B_4_4) ))
                (= X_1_1 (or B_1_1                   (and A_1_1 B_1_1)                                                       ))
                (= X_1_2 (or B_1_2                   (and A_1_1 B_1_2) (and A_1_2 B_2_2)                                     ))
                (= X_1_3 (or B_1_3                   (and A_1_1 B_1_3) (and A_1_2 B_2_3) (and A_1_3 B_3_3)                   ))
                (= X_1_4 (or B_1_4                   (and A_1_1 B_1_4) (and A_1_2 B_2_4) (and A_1_3 B_3_4) (and A_1_4 B_4_4) ))
                (= X_2_2 (or B_2_2                                     (and A_2_2 B_2_2)                                     ))
                (= X_2_3 (or B_2_3                                     (and A_2_2 B_2_3) (and A_2_3 B_3_3)                   ))
                (= X_2_4 (or B_2_4                                     (and A_2_2 B_2_4) (and A_2_3 B_3_4) (and A_2_4 B_4_4) ))
                (= X_3_3 (or B_3_3                                                       (and A_3_3 B_3_3)                   ))
                (= X_3_4 (or B_3_4                                                       (and A_3_3 B_3_4) (and A_3_4 B_4_4) ))
                (= X_4_4 (or B_4_4                                                                         (and A_4_4 B_4_4) ))
            )
            ; Inductive case (even)
            (and
                (and (< 0 len) (= 0 (mod len 2)))
                (= nxt (div len 2))
                (R.Sem r.t nxt s_0 s_1 s_2 s_3  A_0_0 A_0_1 A_0_2 A_0_3 A_0_4 A_1_1 A_1_2 A_1_3 A_1_4 A_2_2 A_2_3 A_2_4 A_3_3 A_3_4 A_4_4 )
                
                ; X_{k} = (X_{k/2} X_{k/2})
                
                (= X_0_0 (or (and A_0_0 A_0_0)                                                                         ))
                (= X_0_1 (or (and A_0_0 A_0_1) (and A_0_1 A_1_1)                                                       ))
                (= X_0_2 (or (and A_0_0 A_0_2) (and A_0_1 A_1_2) (and A_0_2 A_2_2)                                     ))
                (= X_0_3 (or (and A_0_0 A_0_3) (and A_0_1 A_1_3) (and A_0_2 A_2_3) (and A_0_3 A_3_3)                   ))
                (= X_0_4 (or (and A_0_0 A_0_4) (and A_0_1 A_1_4) (and A_0_2 A_2_4) (and A_0_3 A_3_4) (and A_0_4 A_4_4) ))
                (= X_1_1 (or                   (and A_1_1 A_1_1)                                                       ))
                (= X_1_2 (or                   (and A_1_1 A_1_2) (and A_1_2 A_2_2)                                     ))
                (= X_1_3 (or                   (and A_1_1 A_1_3) (and A_1_2 A_2_3) (and A_1_3 A_3_3)                   ))
                (= X_1_4 (or                   (and A_1_1 A_1_4) (and A_1_2 A_2_4) (and A_1_3 A_3_4) (and A_1_4 A_4_4) ))
                (= X_2_2 (or                                     (and A_2_2 A_2_2)                                     ))
                (= X_2_3 (or                                     (and A_2_2 A_2_3) (and A_2_3 A_3_3)                   ))
                (= X_2_4 (or                                     (and A_2_2 A_2_4) (and A_2_3 A_3_4) (and A_2_4 A_4_4) ))
                (= X_3_3 (or                                                       (and A_3_3 A_3_3)                   ))
                (= X_3_4 (or                                                       (and A_3_3 A_3_4) (and A_3_4 A_4_4) ))
                (= X_4_4 (or                                                                         (and A_4_4 A_4_4) ))
            )
        )
    )
))

; GCPE_04: begins with 1, ends with 0

(constraint (Start.Sem match_regex 2 1 0 9 9 true))
(constraint (Start.Sem match_regex 3 1 2 0 9 true))
(constraint (Start.Sem match_regex 4 1 2 2 0 true))
(constraint (Start.Sem match_regex 1 0 9 9 9 false))
(constraint (Start.Sem match_regex 1 1 9 9 9 false))
(constraint (Start.Sem match_regex 2 1 1 9 9 false))
(constraint (Start.Sem match_regex 3 1 3 1 9 false))
(constraint (Start.Sem match_regex 3 0 3 0 9 false))
(constraint (Start.Sem match_regex 3 0 3 1 9 false))