;; round up to next highest power of 2

;; (set-info :format-version "2.4.0")
;; (set-info :author("Rahul Krishnan"))
;; (set-info :realizable true)

(declare-term-types
    ((S 0) (E 0))
    (
        (
            ($=o1 E)
            ($=o2 E)
            ($=o3 E)
            ($=o4 E)
            ($=o5 E)
            ($=o6 E)
            ($=o7 E)
            ($=o8 E)
            ($=o9 E)
            ($=o10 E)
            ($=o11 E)
            ($seq S S)
        )
        (
            ($xvar)
            ($o1)
            ($o2)
            ($o3)
            ($o4)
            ($o5)
            ($o6)
            ($o7)
            ($o8)
            ($o9)
            ($o10)
            ($o11)
            ($1)
            ($2)
            ($4)
            ($8)
            ($16)
            ($bvor E E)
            ($bvlshr E E)
            ($bvadd E E)
            ($bvsub E E)
        )
    )
)

(define-funs-rec
    ((S.Sem ((st S) (x (_ BitVec 32)) (o1 (_ BitVec 32)) (o2 (_ BitVec 32)) (o3 (_ BitVec 32)) (o4 (_ BitVec 32)) (o5 (_ BitVec 32)) (o6 (_ BitVec 32)) (o7 (_ BitVec 32)) (o8 (_ BitVec 32)) (o9 (_ BitVec 32)) (o10 (_ BitVec 32)) (o11 (_ BitVec 32)) (ro1 (_ BitVec 32)) (ro2 (_ BitVec 32)) (ro3 (_ BitVec 32)) (ro4 (_ BitVec 32)) (ro5 (_ BitVec 32)) (ro6 (_ BitVec 32)) (ro7 (_ BitVec 32)) (ro8 (_ BitVec 32)) (ro9 (_ BitVec 32)) (ro10 (_ BitVec 32)) (ro11 (_ BitVec 32))) Bool)
     (E.Sem ((et E) (x (_ BitVec 32)) (o1 (_ BitVec 32)) (o2 (_ BitVec 32)) (o3 (_ BitVec 32)) (o4 (_ BitVec 32)) (o5 (_ BitVec 32)) (o6 (_ BitVec 32)) (o7 (_ BitVec 32)) (o8 (_ BitVec 32)) (o9 (_ BitVec 32)) (o10 (_ BitVec 32)) (o11 (_ BitVec 32)) (result (_ BitVec 32))) Bool))

    ((! (match st
        (
         (($=o1 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 r)
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o2 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 r)
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o3 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 r)
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o4 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 r)
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o5 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 r)
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o6 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 r)
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o7 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 r)
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o8 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 r)
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o9 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 r)
                (= ro10 o10) 
                (= ro11 o11) 
         )))
         (($=o10 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 r)
                (= ro11 o11) 
         )))
         (($=o11 et1) (exists ((r (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r)
                (= ro1 o1) 
                (= ro2 o2) 
                (= ro3 o3) 
                (= ro4 o4) 
                (= ro5 o5) 
                (= ro6 o6) 
                (= ro7 o7) 
                (= ro8 o8) 
                (= ro9 o9) 
                (= ro10 o10) 
                (= ro11 r)
         )))
         (($seq st1 st2) (exists ((ri1 (_ BitVec 32)) (ri2 (_ BitVec 32)) (ri3 (_ BitVec 32)) (ri4 (_ BitVec 32)) (ri5 (_ BitVec 32)) (ri6 (_ BitVec 32)) (ri7 (_ BitVec 32)) (ri8 (_ BitVec 32)) (ri9 (_ BitVec 32)) (ri10 (_ BitVec 32)) (ri11 (_ BitVec 32)) )
            (and
                (S.Sem st1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 ri1 ri2 ri3 ri4 ri5 ri6 ri7 ri8 ri9 ri10 ri11)
                (S.Sem st2 x ri1 ri2 ri3 ri4 ri5 ri6 ri7 ri8 ri9 ri10 ri11 ro1 ro2 ro3 ro4 ro5 ro6 ro7 ro8 ro9 ro10 ro11))))))
         :input ( x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 ) :output ( ro1 ro2 ro3 ro4 ro5 ro6 ro7 ro8 ro9 ro10 ro11 ))
     (! (match et
        (
         ($xvar (= result x))
         ($o1 (= result o1))
         ($o2 (= result o2))
         ($o3 (= result o3))
         ($o4 (= result o4))
         ($o5 (= result o5))
         ($o6 (= result o6))
         ($o7 (= result o7))
         ($o8 (= result o8))
         ($o9 (= result o9))
         ($o10 (= result o10))
         ($o11 (= result o11))
         ($1 (= result #x00000001))
         ($2 (= result #x00000002))
         ($4 (= result #x00000004))
         ($8 (= result #x00000008))
         ($16 (= result #x00000010))
         (($bvor et1 et2) (exists ((r1 (_ BitVec 32)) (r2 (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r1)
                (E.Sem et2 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r2)
                (= result (bvor r1 r2)))))
         (($bvlshr et1 et2) (exists ((r1 (_ BitVec 32)) (r2 (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r1)
                (E.Sem et2 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r2)
                (= result (bvlshr r1 r2)))))
         (($bvadd et1 et2) (exists ((r1 (_ BitVec 32)) (r2 (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r1)
                (E.Sem et2 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r2)
                (= result (ite (bvult #x00000000 ((_ extract 63 32) (bvadd (concat #x00000000 r1) (concat #x00000000 r2)))) #xffffffff ((_ extract 31 0) (bvadd (concat #x00000000 r1) (concat #x00000000 r2))))))))
         (($bvsub et1 et2) (exists ((r1 (_ BitVec 32)) (r2 (_ BitVec 32)))
            (and
                (E.Sem et1 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r1)
                (E.Sem et2 x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 r2)
                ;; 2's complement
                (= result (ite (bvult r1 r2) #x00000000 (bvadd (bvadd r1 (bvnot r2)) #x00000001))))))
          ))
         :input ( x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 ) :output (result))))

(synth-fun bvformula() S)

(define-fun co1 ((x (_ BitVec 32))) (_ BitVec 32) (bvsub x #x00000001))
(define-fun co2 ((x (_ BitVec 32))) (_ BitVec 32) (bvlshr (co1 x) #x00000001))
(define-fun co3 ((x (_ BitVec 32))) (_ BitVec 32) (bvor (co1 x) (co2 x)))
(define-fun co4 ((x (_ BitVec 32))) (_ BitVec 32) (bvlshr (co3 x) #x00000002))
(define-fun co5 ((x (_ BitVec 32))) (_ BitVec 32) (bvor (co3 x) (co4 x)))
(define-fun co6 ((x (_ BitVec 32))) (_ BitVec 32) (bvlshr (co5 x) #x00000004))
(define-fun co7 ((x (_ BitVec 32))) (_ BitVec 32) (bvor (co5 x) (co6 x)))
(define-fun co8 ((x (_ BitVec 32))) (_ BitVec 32) (bvlshr (co7 x) #x00000008))
(define-fun co9 ((x (_ BitVec 32))) (_ BitVec 32) (bvor (co7 x) (co8 x)))
(define-fun co10 ((x (_ BitVec 32))) (_ BitVec 32) (bvlshr (co9 x) #x00000010))
(define-fun co11 ((x (_ BitVec 32))) (_ BitVec 32) (bvor (co9 x) (co10 x)))
(constraint (forall ((x (_ BitVec 32)) (o1 (_ BitVec 32)) (o2 (_ BitVec 32)) (o3 (_ BitVec 32)) (o4 (_ BitVec 32)) (o5 (_ BitVec 32)) (o6 (_ BitVec 32)) (o7 (_ BitVec 32)) (o8 (_ BitVec 32)) (o9 (_ BitVec 32)) (o10 (_ BitVec 32)) (o11 (_ BitVec 32)) (result (_ BitVec 32)))
            (= (S.Sem bvformula x o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 result #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 #x00000000 )
                (= result (bvadd (co10 x) #x00000001) ))))

(check-synth)