(declare-term-types
((E 0) (E1 0) (Start 0) (V 0))
((($+ E1 E1))
(($+ V V))
(($int=x E))
(($IVarx )
($IVarz )
($IVarv )
($IVarw )
($IVary ))))


(define-funs-rec
((E.Sem ((E_term_0 E) (r__0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool)
(E1.Sem ((E1_term_0 E1) (r__0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool)
(Start.Sem ((Start_term_0 Start) (w_r0 Int) (z_r0 Int) (y_r0 Int) (x_r0 Int) (v_r0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool)
(V.Sem ((V_term_0 V) (r__0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool))

((match E_term_0
  ((($+ E1_term_1 E1_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (+ r__1 r__2))
  (E1.Sem E1_term_1 r__1 w z y x v)
  (E1.Sem E1_term_2 r__2 w z y x v))))))
(match E1_term_0
  ((($+ V_term_1 V_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (+ r__1 r__2))
  (V.Sem V_term_1 r__1 w z y x v)
  (V.Sem V_term_2 r__2 w z y x v))))))
(match Start_term_0
  ((($int=x E_term_1) (exists ((r__1 Int)) (and (and (= w w_r0)
  (= z z_r0)
  (= y y_r0)
  (= x r__1)
  (= v v_r0))
  (E.Sem E_term_1 r__1 w z y x v))))))
(match V_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))
($IVarz (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 z))))
($IVarv (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 v))))
($IVarw (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 w))))
($IVary (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 y))))))))


(synth-fun basicTest_SumWithLimitedOps_02() Start)


(constraint (exists ((v Int) (y Int) (z Int) (w Int)) (Start.Sem basicTest_SumWithLimitedOps_02 w z y 15 v 2 5 4 3 1)))
(constraint (exists ((v Int) (y Int) (z Int) (w Int)) (Start.Sem basicTest_SumWithLimitedOps_02 w z y 70 v 21 16 13 11 9)))

(check-synth)