(declare-term-types
((E 0) (Start 0))
((($IVarv )
($IVary )
($IVarw )
($IVarz )
($+ E E)
($IVarx ))
(($int=x E))))


(define-funs-rec
((E.Sem ((E_term_0 E) (r__0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool)
(Start.Sem ((Start_term_0 Start) (w_r0 Int) (z_r0 Int) (y_r0 Int) (x_r0 Int) (v_r0 Int) (w Int) (z Int) (y Int) (x Int) (v Int)) Bool))

((match E_term_0
  (($IVarv (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 v))))
($IVary (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 y))))
($IVarw (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 w))))
($IVarz (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 z))))
(($+ E_term_1 E_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (+ r__1 r__2))
  (E.Sem E_term_1 r__1 w z y x v)
  (E.Sem E_term_2 r__2 w z y x v))))
($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match Start_term_0
  ((($int=x E_term_1) (exists ((r__1 Int)) (and (and (= w w_r0)
  (= z z_r0)
  (= y y_r0)
  (= x r__1)
  (= v v_r0))
  (E.Sem E_term_1 r__1 w z y x v))))))))


(synth-fun basicTest_SumWithLimitedOps_01() Start)


(constraint (exists ((v Int) (y Int) (z Int) (w Int)) (Start.Sem basicTest_SumWithLimitedOps_01 w z y 15 v 2 5 4 3 1)))
(constraint (exists ((v Int) (y Int) (z Int) (w Int)) (Start.Sem basicTest_SumWithLimitedOps_01 w z y 70 v 21 16 13 11 9)))

(check-synth)