(declare-term-types
((B 0) (C 0) (E 0) (RN1 0) (RN2 0) (RN3 0) (RN5 0) (RN6 0) (S 0) (Start 0))
((($< RN3 C))
(($IInt200 ))
(($+ RN1 RN2)
($- RN5 RN6))
(($IVarx ))
(($IVarx ))
(($IVarx ))
(($IVarx ))
(($IVarx ))
(($int=x E))
(($while B S))))


(define-funs-rec
((B.Sem ((B_term_0 B) (r__0 Bool) (x Int)) Bool)
(C.Sem ((C_term_0 C) (r__0 Int) (x Int)) Bool)
(E.Sem ((E_term_0 E) (r__0 Int) (x Int)) Bool)
(RN1.Sem ((RN1_term_0 RN1) (r__0 Int) (x Int)) Bool)
(RN2.Sem ((RN2_term_0 RN2) (r__0 Int) (x Int)) Bool)
(RN3.Sem ((RN3_term_0 RN3) (r__0 Int) (x Int)) Bool)
(RN5.Sem ((RN5_term_0 RN5) (r__0 Int) (x Int)) Bool)
(RN6.Sem ((RN6_term_0 RN6) (r__0 Int) (x Int)) Bool)
(S.Sem ((S_term_0 S) (x_r0 Int) (x Int)) Bool)
(Start.Sem ((Start_term_0 Start) (x_r0 Int) (x Int)) Bool))

((match B_term_0
  ((($< RN3_term_1 C_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (< r__1 r__2))
  (RN3.Sem RN3_term_1 r__1 x)
  (C.Sem C_term_2 r__2 x))))))
(match C_term_0
  (($IInt200 (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 200))))))
(match E_term_0
  ((($+ RN1_term_1 RN2_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (+ r__1 r__2))
  (RN1.Sem RN1_term_1 r__1 x)
  (RN2.Sem RN2_term_2 r__2 x))))
(($- RN5_term_1 RN6_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (- r__1 r__2))
  (RN5.Sem RN5_term_1 r__1 x)
  (RN6.Sem RN6_term_2 r__2 x))))))
(match RN1_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match RN2_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match RN3_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match RN5_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match RN6_term_0
  (($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))))
(match S_term_0
  ((($int=x E_term_1) (exists ((r__1 Int)) (and (= x r__1)
  (E.Sem E_term_1 r__1 x))))))
(match Start_term_0
  ((($while B_term_1 S_term_2) (exists ((r__1 Bool) (x_r2 Int)) (and r__1
  (B.Sem B_term_1 r__1 x)
  (S.Sem S_term_2 x_r2 x)
  (Start.Sem Start_term_0 x_r0 x_r2)))
(exists ((r__1 Bool)) (and (not r__1)
  (B.Sem B_term_1 r__1 x)
  (= x x_r0))))))))


(synth-fun basicTest_Sanity01() Start)


(constraint (Start.Sem basicTest_Sanity01 10 4))

(check-synth)