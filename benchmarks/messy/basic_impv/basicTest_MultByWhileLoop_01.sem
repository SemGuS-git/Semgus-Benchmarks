(declare-term-types
((B 0) (E 0) (NS 0) (S 0) (Start 0) (V 0))
((($< V V))
(($IInt0 )
($IVarj )
($IInt1 )
($IVari )
($+ E E)
($IVarc ))
(($int=c E)
($int=i E)
($seq NS NS)
($int=j E))
(($int=j E)
($while B NS)
($seq S S)
($int=i E))
(($while B S))
(($IVary )
($IVari )
($IVarc )
($IVarx )
($IVarj ))))


(define-funs-rec
((B.Sem ((B_term_0 B) (r__0 Bool) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool)
(E.Sem ((E_term_0 E) (r__0 Int) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool)
(NS.Sem ((NS_term_0 NS) (x_r0 Int) (j_r0 Int) (i_r0 Int) (y_r0 Int) (c_r0 Int) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool)
(S.Sem ((S_term_0 S) (x_r0 Int) (j_r0 Int) (i_r0 Int) (y_r0 Int) (c_r0 Int) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool)
(Start.Sem ((Start_term_0 Start) (x_r0 Int) (j_r0 Int) (i_r0 Int) (y_r0 Int) (c_r0 Int) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool)
(V.Sem ((V_term_0 V) (r__0 Int) (x Int) (j Int) (i Int) (y Int) (c Int)) Bool))

((match B_term_0
  ((($< V_term_1 V_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (< r__1 r__2))
  (V.Sem V_term_1 r__1 x j i y c)
  (V.Sem V_term_2 r__2 x j i y c))))))
(match E_term_0
  (($IInt0 (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 0))))
($IVarj (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 j))))
($IInt1 (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 1))))
($IVari (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 i))))
(($+ E_term_1 E_term_2) (exists ((r__1 Int) (r__2 Int)) (and (= r__0 (+ r__1 r__2))
  (E.Sem E_term_1 r__1 x j i y c)
  (E.Sem E_term_2 r__2 x j i y c))))
($IVarc (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 c))))))
(match NS_term_0
  ((($int=c E_term_1) (exists ((r__1 Int)) (and (and (= x x_r0)
  (= j j_r0)
  (= i i_r0)
  (= y y_r0)
  (= c r__1))
  (E.Sem E_term_1 r__1 x j i y c))))
(($int=i E_term_1) (exists ((r__1 Int)) (and (and (= x x_r0)
  (= j j_r0)
  (= i r__1)
  (= y y_r0)
  (= c c_r0))
  (E.Sem E_term_1 r__1 x j i y c))))
(($seq NS_term_1 NS_term_2) (exists ((x_r1 Int) (j_r1 Int) (i_r1 Int) (y_r1 Int) (c_r1 Int)) (and (NS.Sem NS_term_1 x_r1 j_r1 i_r1 y_r1 c_r1 x j i y c)
  (NS.Sem NS_term_2 x_r0 j_r0 i_r0 y_r0 c_r0 x_r1 j_r1 i_r1 y_r1 c_r1))))
(($int=j E_term_1) (exists ((r__1 Int)) (and (and (= x x_r0)
  (= j r__1)
  (= i i_r0)
  (= y y_r0)
  (= c c_r0))
  (E.Sem E_term_1 r__1 x j i y c))))))
(match S_term_0
  ((($int=j E_term_1) (exists ((r__1 Int)) (and (and (= x x_r0)
  (= j r__1)
  (= i i_r0)
  (= y y_r0)
  (= c c_r0))
  (E.Sem E_term_1 r__1 x j i y c))))
(($while B_term_1 NS_term_2) (exists ((r__1 Bool) (x_r2 Int) (j_r2 Int) (i_r2 Int) (y_r2 Int) (c_r2 Int)) (and r__1
  (B.Sem B_term_1 r__1 x j i y c)
  (NS.Sem NS_term_2 x_r2 j_r2 i_r2 y_r2 c_r2 x j i y c)
  (S.Sem S_term_0 x_r0 j_r0 i_r0 y_r0 c_r0 x_r2 j_r2 i_r2 y_r2 c_r2)))
(exists ((r__1 Bool)) (and (not r__1)
  (B.Sem B_term_1 r__1 x j i y c)
  (and (= x x_r0)
  (= j j_r0)
  (= i i_r0)
  (= y y_r0)
  (= c c_r0)))))
(($seq S_term_1 S_term_2) (exists ((x_r1 Int) (j_r1 Int) (i_r1 Int) (y_r1 Int) (c_r1 Int)) (and (S.Sem S_term_1 x_r1 j_r1 i_r1 y_r1 c_r1 x j i y c)
  (S.Sem S_term_2 x_r0 j_r0 i_r0 y_r0 c_r0 x_r1 j_r1 i_r1 y_r1 c_r1))))
(($int=i E_term_1) (exists ((r__1 Int)) (and (and (= x x_r0)
  (= j j_r0)
  (= i r__1)
  (= y y_r0)
  (= c c_r0))
  (E.Sem E_term_1 r__1 x j i y c))))))
(match Start_term_0
  ((($while B_term_1 S_term_2) (exists ((r__1 Bool) (x_r2 Int) (j_r2 Int) (i_r2 Int) (y_r2 Int) (c_r2 Int)) (and r__1
  (B.Sem B_term_1 r__1 x j i y c)
  (S.Sem S_term_2 x_r2 j_r2 i_r2 y_r2 c_r2 x j i y c)
  (Start.Sem Start_term_0 x_r0 j_r0 i_r0 y_r0 c_r0 x_r2 j_r2 i_r2 y_r2 c_r2)))
(exists ((r__1 Bool)) (and (not r__1)
  (B.Sem B_term_1 r__1 x j i y c)
  (and (= x x_r0)
  (= j j_r0)
  (= i i_r0)
  (= y y_r0)
  (= c c_r0)))))))
(match V_term_0
  (($IVary (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 y))))
($IVari (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 i))))
($IVarc (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 c))))
($IVarx (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 x))))
($IVarj (exists ((r__1 Int)) (and (= r__0 r__1)
  (= r__1 j))))))))


(synth-fun basicTest_MultByWhileLoop_01() Start)


(constraint (exists ((y Int) (i Int) (j Int) (x Int)) (Start.Sem basicTest_MultByWhileLoop_01 x j i y 40 4 0 0 10 0)))
(constraint (exists ((y Int) (i Int) (j Int) (x Int)) (Start.Sem basicTest_MultByWhileLoop_01 x j i y 30 5 0 0 6 0)))
(constraint (exists ((y Int) (i Int) (j Int) (x Int)) (Start.Sem basicTest_MultByWhileLoop_01 x j i y 24 8 0 0 3 0)))

(check-synth)